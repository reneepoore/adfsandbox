{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzureSqlDatabaseAdventureWorks": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_SCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDType2_EmployeePOC_TEST",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2_EmployeePOC_TEST",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2_EmployeePOC_TEST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkNewData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkInsertUpdates"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkInactive"
						}
					],
					"transformations": [
						{
							"name": "SetIsActive"
						},
						{
							"name": "CheckNewRecords"
						},
						{
							"name": "SelectToRename"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "AddIsActive"
						},
						{
							"name": "ChangeIsActive"
						},
						{
							"name": "SelectInactiveColumns"
						},
						{
							"name": "UpdateColumns"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "FilterCurrent"
						},
						{
							"name": "SelectSinkColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"CheckNewRecords@NewRecords derive(IsActive = 1) ~> SetIsActive",
						"SelectColumns split(isNull(tgtIsActive),",
						"     disjoint: false) ~> CheckNewRecords@(NewRecords, CheckForUpdates)",
						"CheckNewRecords@CheckForUpdates select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          MiddleName,",
						"          Title,",
						"          HireDate,",
						"          BirthDate,",
						"          Phone,",
						"          MaritalStatus,",
						"          EmergencyContactName,",
						"          EmergencyContactPhone,",
						"          SalariedFlag,",
						"          Gender,",
						"          DepartmentName,",
						"          StartDate,",
						"          EndDate,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectToRename",
						"SelectToRename, tgtDimEmployee exists(SelectToRename@FirstName ==tgtDimEmployee@FirstName&&\r",
						"SelectToRename@LastName==tgtDimEmployee@LastName&&\r",
						"SelectToRename@BirthDate==tgtDimEmployee@BirthDate&&\r",
						"\r",
						"(\r",
						"SelectToRename@LastName!=tgtDimEmployee@LastName||\r",
						"SelectToRename@Title!=tgtDimEmployee@Title||\r",
						"SelectToRename@Phone!=tgtDimEmployee@Phone||\r",
						"SelectToRename@MaritalStatus!=tgtDimEmployee@MaritalStatus||\r",
						"SelectToRename@SalariedFlag!=tgtDimEmployee@SalariedFlag||\r",
						"SelectToRename@DepartmentName!=tgtDimEmployee@DepartmentName||\r",
						"SelectToRename@EndDate!=tgtDimEmployee@EndDate||\r",
						"SelectToRename@Status!=tgtDimEmployee@Status),",
						"     negate:false,",
						"     broadcast: 'left')~> CheckForChanges",
						"CheckForChanges derive(IsActive = 1) ~> AddIsActive",
						"CheckForChanges derive(drvIsActive = 0,",
						"          drvEndDate = currentDate(),",
						"          drvStatus = 'Termed') ~> ChangeIsActive",
						"ChangeIsActive select(mapColumn(",
						"          EndDate = drvEndDate,",
						"          Status = drvStatus,",
						"          IsActive = drvIsActive,",
						"          FirstName,",
						"          LastName,",
						"          BirthDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveColumns",
						"SelectInactiveColumns alterRow(updateIf(true())) ~> UpdateColumns",
						"FilterCurrent, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"LkpEmployee select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          EmployeeKey,",
						"          tgtLastName = tgtDimEmployee@LastName,",
						"          tgtTitle = tgtDimEmployee@Title,",
						"          tgtPhone = tgtDimEmployee@Phone,",
						"          tgtMaritalStatus = tgtDimEmployee@MaritalStatus,",
						"          tgtSalariedFlag = tgtDimEmployee@SalariedFlag,",
						"          tgtDepartmentName = tgtDimEmployee@DepartmentName,",
						"          tgtEndDate = tgtDimEmployee@EndDate,",
						"          tgtStatus = tgtDimEmployee@Status,",
						"          tgtIsActive = IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"srcEmployeeData filter(Status=='Current') ~> FilterCurrent",
						"SetIsActive select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          MiddleName,",
						"          Title,",
						"          HireDate,",
						"          BirthDate,",
						"          Phone,",
						"          MaritalStatus,",
						"          EmergencyContactName,",
						"          EmergencyContactPhone,",
						"          SalariedFlag,",
						"          Gender,",
						"          DepartmentName,",
						"          StartDate,",
						"          EndDate,",
						"          Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkNewData",
						"AddIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkInsertUpdates",
						"UpdateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['FirstName','LastName','BirthDate'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkInactive"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/tgtDimEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgSourceEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSqlDatabaseAdventureWorks')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "EmergencyContactName",
						"type": "nvarchar"
					},
					{
						"name": "EmergencyContactPhone",
						"type": "nvarchar"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "DepartmentName",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stgSourceEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtDimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSqlDatabaseAdventureWorks')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgtDimEmployee"
				}
			},
			"dependsOn": []
		}
	]
}