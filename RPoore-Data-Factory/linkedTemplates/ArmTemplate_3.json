{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RPoore-Data-Factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SDDenormalizedecision')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SDDENORMALIZEDDECISIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "INTEGRATEDCASEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PRODUCTDELIVERYCASEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PARTICIPANTID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREOLECASEDETERMINATIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "TIMELINESTARTDATE",
						"type": "date"
					},
					{
						"name": "TIMELINEENDDATE",
						"type": "date"
					},
					{
						"name": "ISELIGIBLE",
						"type": "char"
					},
					{
						"name": "PRODUCTID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CASEDECISIONSTATUSCODE",
						"type": "char"
					},
					{
						"name": "ISHOUSEHOLDMEMBERELIGIBLE",
						"type": "char"
					},
					{
						"name": "BENEFITAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "AIDCODE",
						"type": "char"
					},
					{
						"name": "RECORDSTATUS",
						"type": "char"
					},
					{
						"name": "RULEOBJECTSNAPSHOTDATAID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "UNEARNEDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "EARNEDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SELFEMPLOYMENTINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "INCOMEDEDUCTIONS",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "NETINDIVIDUALINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "ADJUSTEDGROSSINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "HOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDCOVERAGECODE",
						"type": "char"
					},
					{
						"name": "SDCOPAYVALUE",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDMONTHLYGROSSINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDISRETROACTIVE",
						"type": "char"
					},
					{
						"name": "SDPOVERTYLEVEL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDMEMBERPERCENTPOVERTYLEVEL",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDMEMBERCREDITABLEINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDISPREGNANT",
						"type": "char"
					},
					{
						"name": "SDMAGIHOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDMAGIMONTHLYHOUSEHOLDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDSTATEHOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDSTATEMONTHLYHOUSEHOLDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "TOTALSHAREOFCOSTAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ISUTILIZINGALLBENEFITS",
						"type": "char"
					},
					{
						"name": "LOTTERWINNINGSAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "UNCOMPENSATEDIRTAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "DAILYPRIVATEPAYRATE",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "SDDENORMALIZEDDECISION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_qt6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeeLoaderWorkingExampleFromADF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles1",
								"type": "DatasetReference"
							},
							"name": "Employees1",
							"description": " Source employees file, changes every day"
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "DimEmployees",
							"description": "Current rows in DimEmployees DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkNew",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkUpdates",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": " Age out old rows"
						}
					],
					"transformations": [
						{
							"name": "TypeConversions"
						},
						{
							"name": "TypeConversionsAndSetAttrs"
						},
						{
							"name": "LookupIDs"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "checkForChanges"
						},
						{
							"name": "SetAttrsForNew"
						},
						{
							"name": "SetAttrsInactive",
							"description": "make iscurrent 0"
						},
						{
							"name": "SetAttrsUpdate"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "InactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "NullFilter",
							"description": "Filter out NULLs from source file"
						},
						{
							"name": "NameNorm2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as string,",
						"          Region as string,",
						"          Status as string,",
						"          Function as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as string,",
						"          EndDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> Employees1",
						"source(output(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimEmployees",
						"DimEmployees derive(EmpID = toInteger(EmpID)) ~> TypeConversions",
						"NullFilter derive(EmpID = toInteger(EmpID),",
						"          StartDate = toDate(StartDate,'MM/dd/yyyy'),",
						"          EndDate = toDate(EndDate,'MM/dd/yyyy'),",
						"          processtime = currentTimestamp()) ~> TypeConversionsAndSetAttrs",
						"TypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@EmpID == TypeConversions@EmpID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookupIDs",
						"NormNames split(isNull(iscurrent),",
						"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
						"NameNorm2, TypeConversions exists(NameNorm2@EmpID == TypeConversions@EmpID,",
						"     negate:false,",
						"     broadcast: 'auto')~> checkForChanges",
						"ConditionalSplit1@NewRow derive(iscurrent = 1,",
						"          surrogatekey = toString(crc32(EmpID,EmpFunction))) ~> SetAttrsForNew",
						"checkForChanges derive(iscurrent = 0) ~> SetAttrsInactive",
						"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
						"LookupIDs select(mapColumn(",
						"          EmpID = TypeConversionsAndSetAttrs@EmpID,",
						"          Region = Employees1@Region,",
						"          Status = Employees1@Status,",
						"          Level = Employees1@Level,",
						"          Role = Employees1@Role,",
						"          StartDate = TypeConversionsAndSetAttrs@StartDate,",
						"          EndDate = TypeConversionsAndSetAttrs@EndDate,",
						"          EmpFunction = Function,",
						"          iscurrent,",
						"          processtime = TypeConversionsAndSetAttrs@processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NormNames",
						"SetAttrsInactive select(mapColumn(",
						"          EmpID,",
						"          Status,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> InactiveFields",
						"InactiveFields alterRow(updateIf(true())) ~> AlterRow1",
						"Employees1 filter(!isNull(EmpID)) ~> NullFilter",
						"ConditionalSplit1@CheckForUpdates select(mapColumn(",
						"          EmpID,",
						"          Region,",
						"          Status,",
						"          Level,",
						"          Role,",
						"          StartDate,",
						"          EndDate,",
						"          EmpFunction,",
						"          iscurrent,",
						"          processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NameNorm2",
						"SetAttrsForNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkNew",
						"SetAttrsUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkUpdates",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['EmpID'],",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpID,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     partitionBy('roundRobin', 4)) ~> sinkInactive"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkNewData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkInsertUpdates"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkInactive"
						}
					],
					"transformations": [
						{
							"name": "SetIsActive"
						},
						{
							"name": "CheckNewRecords"
						},
						{
							"name": "SelectToRename"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "AddIsActive"
						},
						{
							"name": "ChangeIsActive"
						},
						{
							"name": "SelectInactiveColumns"
						},
						{
							"name": "UpdateColumns"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "FilterCurrent"
						},
						{
							"name": "SelectSinkColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"CheckNewRecords@NewRecords derive(IsActive = 1) ~> SetIsActive",
						"SelectColumns split(isNull(tgtIsActive),",
						"     disjoint: false) ~> CheckNewRecords@(NewRecords, CheckForUpdates)",
						"CheckNewRecords@CheckForUpdates select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          MiddleName,",
						"          Title,",
						"          HireDate,",
						"          BirthDate,",
						"          Phone,",
						"          MaritalStatus,",
						"          EmergencyContactName,",
						"          EmergencyContactPhone,",
						"          SalariedFlag,",
						"          Gender,",
						"          DepartmentName,",
						"          StartDate,",
						"          EndDate,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectToRename",
						"SelectToRename, tgtDimEmployee exists(SelectToRename@FirstName ==tgtDimEmployee@FirstName&&\r",
						"SelectToRename@LastName==tgtDimEmployee@LastName&&\r",
						"SelectToRename@BirthDate==tgtDimEmployee@BirthDate&&\r",
						"\r",
						"(\r",
						"SelectToRename@LastName!=tgtDimEmployee@LastName||\r",
						"SelectToRename@Title!=tgtDimEmployee@Title||\r",
						"SelectToRename@Phone!=tgtDimEmployee@Phone||\r",
						"SelectToRename@MaritalStatus!=tgtDimEmployee@MaritalStatus||\r",
						"SelectToRename@SalariedFlag!=tgtDimEmployee@SalariedFlag||\r",
						"SelectToRename@DepartmentName!=tgtDimEmployee@DepartmentName||\r",
						"SelectToRename@EndDate!=tgtDimEmployee@EndDate||\r",
						"SelectToRename@Status!=tgtDimEmployee@Status),",
						"     negate:false,",
						"     broadcast: 'left')~> CheckForChanges",
						"CheckForChanges derive(IsActive = 1) ~> AddIsActive",
						"CheckForChanges derive(drvIsActive = 0,",
						"          drvEndDate = currentDate(),",
						"          drvStatus = 'Termed') ~> ChangeIsActive",
						"ChangeIsActive select(mapColumn(",
						"          EndDate = drvEndDate,",
						"          Status = drvStatus,",
						"          IsActive = drvIsActive,",
						"          FirstName,",
						"          LastName,",
						"          BirthDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveColumns",
						"SelectInactiveColumns alterRow(updateIf(true())) ~> UpdateColumns",
						"FilterCurrent, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"LkpEmployee select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          EmployeeKey,",
						"          tgtLastName = tgtDimEmployee@LastName,",
						"          tgtTitle = tgtDimEmployee@Title,",
						"          tgtPhone = tgtDimEmployee@Phone,",
						"          tgtMaritalStatus = tgtDimEmployee@MaritalStatus,",
						"          tgtSalariedFlag = tgtDimEmployee@SalariedFlag,",
						"          tgtDepartmentName = tgtDimEmployee@DepartmentName,",
						"          tgtEndDate = tgtDimEmployee@EndDate,",
						"          tgtStatus = tgtDimEmployee@Status,",
						"          tgtIsActive = IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"srcEmployeeData filter(Status=='Current') ~> FilterCurrent",
						"SetIsActive select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          MiddleName,",
						"          Title,",
						"          HireDate,",
						"          BirthDate,",
						"          Phone,",
						"          MaritalStatus,",
						"          EmergencyContactName,",
						"          EmergencyContactPhone,",
						"          SalariedFlag,",
						"          Gender,",
						"          DepartmentName,",
						"          StartDate,",
						"          EndDate,",
						"          Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkNewData",
						"AddIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkInsertUpdates",
						"UpdateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['FirstName','LastName','BirthDate'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkInactive"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_YouTubeLogic')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkUpdates"
						}
					],
					"transformations": [
						{
							"name": "AddIsActive"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "FilterCurrent"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSinkColumns"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"LkpEmployee derive(IsActive = 1) ~> AddIsActive",
						"FilterCurrent, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"srcEmployeeData filter(Status=='Current') ~> FilterCurrent",
						"tgtDimEmployee filter(Status=='Current') ~> filter1",
						"AddIsActive select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns alterRow(insertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkUpdates"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkUpdates"
						}
					],
					"transformations": [
						{
							"name": "AddIsActive"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSinkColumns"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"LkpEmployee derive(IsActive = 1) ~> AddIsActive",
						"srcEmployeeData, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"tgtDimEmployee filter(Status=='Current') ~> filter1",
						"AddIsActive select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns alterRow(insertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkUpdates"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "stgAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "trgtAddress"
						}
					],
					"transformations": [
						{
							"name": "Exists"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "ModifiedDate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgAddress",
						"ModifiedDate, stgAddress exists(srcAddress@AddressID == stgAddress@AddressID,",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists alterRow(upsertIf(true())) ~> Upsert",
						"srcAddress derive(EDWCreateDate = currentTimestamp()) ~> ModifiedDate",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> trgtAddress"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address_SCD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "POCWork"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SCD1",
								"type": "DatasetReference"
							},
							"name": "trgtAddressSCD"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"srcAddress alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AddressID,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          City,",
						"          StateProvince,",
						"          CountryRegion,",
						"          PostalCode,",
						"          rowguid,",
						"          ModifiedDate",
						"     )) ~> trgtAddressSCD"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "stgAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "trgtAddress"
						}
					],
					"transformations": [
						{
							"name": "Checksum"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgAddress",
						"srcAddress derive(checksum = sha1(AddressLine1,AddressLine2,City,StateProvince,CountryRegion,PostalCode)) ~> Checksum",
						"Checksum, stgAddress exists(checksum == sha1(stgAddress@AddressLine1,stgAddress@AddressLine2,stgAddress@City,stgAddress@StateProvince,stgAddress@CountryRegion,stgAddress@PostalCode),",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> trgtAddress"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CustomerDim_Parameters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is not working as expected.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference"
							},
							"name": "srcCustomerDimwParameters"
						},
						{
							"dataset": {
								"referenceName": "Customer_Test",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerLoadTest",
								"type": "DatasetReference"
							},
							"name": "CustomerLoadTest"
						},
						{
							"dataset": {
								"referenceName": "Test_Date_Parameters",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchKey as string",
						"}",
						"source(output(",
						"          ProcessID as integer,",
						"          ProcessName as string,",
						"          StartDateTime as timestamp,",
						"          EndDateTime as timestamp,",
						"          BatchKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT StartDateTime ,EndDateTime ,BatchKey FROM dbo.EDW_Fact_Load_Control WHERE BatchKey='{$BatchKey}'\"),",
						"     format: 'query') ~> srcCustomerDimwParameters",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"srcCustomerDimwParameters filter(BatchKey==$BatchKey) ~> filter1",
						"source1, filter1 lookup(ModifiedDate >= StartDateTime,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CustomerLoadTest",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CustomerDim_Parameters_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is not working as expected.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference"
							},
							"name": "srcCustomerDimwParameters"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     BatchKey as string ('B5F7BEFB9510472A97DC7EF27D405EA2')",
						"}",
						"source(output(",
						"          ProcessID as integer,",
						"          ProcessName as string,",
						"          StartDateTime as timestamp,",
						"          EndDateTime as timestamp,",
						"          BatchKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '@\"SELECT StartDateTime ,EndDateTime ,BatchKey FROM dbo.EDW_Fact_Load_Control WHERE BatchKey=\\'$BatchKey\\'\"',",
						"     format: 'query') ~> srcCustomerDimwParameters",
						"srcCustomerDimwParameters sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_CustomerSource",
								"type": "DatasetReference"
							},
							"name": "srcCustomSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     dfStartDate as string,",
						"     formattedStartDate as date (toDate($dfStartDate)),",
						"     dfEndDate as string,",
						"     formattedEndDate as date (toDate($dfEndDate))",
						"}",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat(\"select * from SalesLT.Customer_Source where ModifiedDate> \",toString($formattedStartDate) )),",
						"     format: 'query') ~> srcCustomSource",
						"srcCustomSource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE dbo.CustomerTest'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Initial_Build_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "GetFactInternetSalesData"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactSalesProducts",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GetFactInternetSalesData",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"GetFactInternetSalesData select(mapColumn(",
						"          ProductKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, DimProduct lookup(select1@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          ProductKey = DimProduct@ProductKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          EnglishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoggingTarget')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "srcDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rowswritten",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorageRP",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     rowswritten as integer,",
						"     status as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcDummy",
						"srcDummy derive(rowswritten1 = $rowswritten,",
						"          status = $status) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['rowswritten.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = rowswritten1,",
						"          Column_2 = status",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoggingTarget_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "srcDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rowswritten",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorageRP",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as integer,",
						"     parameter2 as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcDummy",
						"srcDummy derive(rowswritten1 = $parameter1,",
						"          status1 = $parameter2) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['rowswritten.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = rowswritten1,",
						"          Column_2 = status1",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Logging_Src_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to test logging for a dataflow\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DimCustomer_Target",
								"type": "DatasetReference"
							},
							"name": "tgtDimCustomerTarget",
							"description": "Target table"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          GeographyKey,",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome,",
						"          EnglishEducation,",
						"          SpanishEducation,",
						"          FrenchEducation,",
						"          EnglishOccupation,",
						"          SpanishOccupation,",
						"          FrenchOccupation,",
						"          HouseOwnerFlag,",
						"          NumberCarsOwned,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance",
						"     )) ~> tgtDimCustomerTarget"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Logging_Src_Test_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to test logging for a dataflow\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DimCustomer_Target",
								"type": "DatasetReference"
							},
							"name": "tgtDimCustomerTarget",
							"description": "Target table"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> tgtDimCustomerTarget"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Normalize_Internet_Sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "srcFactInternetSales"
						},
						{
							"dataset": {
								"referenceName": "DimPromotion",
								"type": "DatasetReference"
							},
							"name": "DimPromotion"
						},
						{
							"dataset": {
								"referenceName": "DimSalesTerritory",
								"type": "DatasetReference"
							},
							"name": "DimSalesTerritory"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactInternetSalesNormalized",
								"type": "DatasetReference"
							},
							"name": "TargetData"
						}
					],
					"transformations": [
						{
							"name": "joinPromotion"
						},
						{
							"name": "lkupSalesTerritory"
						},
						{
							"name": "lkupCustomer"
						},
						{
							"name": "lkupProduct"
						},
						{
							"name": "slctTargetData"
						},
						{
							"name": "drvCustomerName"
						},
						{
							"name": "slctTarget"
						},
						{
							"name": "slctAfterLkups"
						},
						{
							"name": "surrKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcFactInternetSales",
						"source(output(",
						"          PromotionKey as integer,",
						"          PromotionAlternateKey as integer,",
						"          EnglishPromotionName as string,",
						"          SpanishPromotionName as string,",
						"          FrenchPromotionName as string,",
						"          DiscountPct as double,",
						"          EnglishPromotionType as string,",
						"          SpanishPromotionType as string,",
						"          FrenchPromotionType as string,",
						"          EnglishPromotionCategory as string,",
						"          SpanishPromotionCategory as string,",
						"          FrenchPromotionCategory as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          MinQty as integer,",
						"          MaxQty as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimPromotion",
						"source(output(",
						"          SalesTerritoryKey as integer,",
						"          SalesTerritoryAlternateKey as integer,",
						"          SalesTerritoryRegion as string,",
						"          SalesTerritoryCountry as string,",
						"          SalesTerritoryGroup as string,",
						"          SalesTerritoryImage as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimSalesTerritory",
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"srcFactInternetSales, DimPromotion join(srcFactInternetSales@PromotionKey == DimPromotion@PromotionKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPromotion",
						"joinPromotion, DimSalesTerritory lookup(srcFactInternetSales@SalesTerritoryKey == DimSalesTerritory@SalesTerritoryKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupSalesTerritory",
						"lkupSalesTerritory, DimCustomer lookup(srcFactInternetSales@CustomerKey == DimCustomer@CustomerKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupCustomer",
						"lkupCustomer, DimProduct lookup(srcFactInternetSales@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupProduct",
						"slctAfterLkups select(mapColumn(",
						"          ProductKey,",
						"          OrderDateKey,",
						"          DueDateKey,",
						"          ShipDateKey,",
						"          CustomerKey,",
						"          PromotionKey,",
						"          CurrencyKey,",
						"          SalesTerritoryKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          RevisionNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          OrderDate,",
						"          DueDate,",
						"          ShipDate,",
						"          PromotionAlternateKey,",
						"          EnglishPromotionName,",
						"          SpanishPromotionName,",
						"          FrenchPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          SpanishPromotionType,",
						"          FrenchPromotionType,",
						"          EnglishPromotionCategory,",
						"          SpanishPromotionCategory,",
						"          FrenchPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          SalesTerritoryImage,",
						"          GeographyKey,",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome,",
						"          EnglishEducation,",
						"          SpanishEducation,",
						"          FrenchEducation,",
						"          EnglishOccupation,",
						"          SpanishOccupation,",
						"          FrenchOccupation,",
						"          HouseOwnerFlag,",
						"          NumberCarsOwned,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          ProductAlternateKey,",
						"          ProductSubcategoryKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          SpanishProductName,",
						"          FrenchProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          LargePhoto,",
						"          EnglishDescription,",
						"          FrenchDescription,",
						"          ChineseDescription,",
						"          ArabicDescription,",
						"          HebrewDescription,",
						"          ThaiDescription,",
						"          GermanDescription,",
						"          JapaneseDescription,",
						"          TurkishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctTargetData",
						"slctTargetData derive(CustomerName = FirstName + ' '+LastName) ~> drvCustomerName",
						"drvCustomerName select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          EnglishPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          EnglishPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryKey,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          Color,",
						"          ListPrice,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          Status,",
						"          Customer_Name = CustomerName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> slctTarget",
						"lkupProduct select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctAfterLkups",
						"slctTarget keyGenerate(output(SalesNormalizedKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrKey",
						"surrKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Normalize_Internet_Sales_w_Truncate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "srcFactInternetSales"
						},
						{
							"dataset": {
								"referenceName": "DimPromotion",
								"type": "DatasetReference"
							},
							"name": "DimPromotion"
						},
						{
							"dataset": {
								"referenceName": "DimSalesTerritory",
								"type": "DatasetReference"
							},
							"name": "DimSalesTerritory"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactInternetSalesNormalized",
								"type": "DatasetReference"
							},
							"name": "TargetData"
						}
					],
					"transformations": [
						{
							"name": "joinPromotion"
						},
						{
							"name": "lkupSalesTerritory"
						},
						{
							"name": "lkupCustomer"
						},
						{
							"name": "lkupProduct"
						},
						{
							"name": "slctTargetData"
						},
						{
							"name": "drvCustomerName"
						},
						{
							"name": "slctTarget"
						},
						{
							"name": "slctAfterLkups"
						},
						{
							"name": "surrKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcFactInternetSales",
						"source(output(",
						"          PromotionKey as integer,",
						"          PromotionAlternateKey as integer,",
						"          EnglishPromotionName as string,",
						"          SpanishPromotionName as string,",
						"          FrenchPromotionName as string,",
						"          DiscountPct as double,",
						"          EnglishPromotionType as string,",
						"          SpanishPromotionType as string,",
						"          FrenchPromotionType as string,",
						"          EnglishPromotionCategory as string,",
						"          SpanishPromotionCategory as string,",
						"          FrenchPromotionCategory as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          MinQty as integer,",
						"          MaxQty as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimPromotion",
						"source(output(",
						"          SalesTerritoryKey as integer,",
						"          SalesTerritoryAlternateKey as integer,",
						"          SalesTerritoryRegion as string,",
						"          SalesTerritoryCountry as string,",
						"          SalesTerritoryGroup as string,",
						"          SalesTerritoryImage as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimSalesTerritory",
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"srcFactInternetSales, DimPromotion join(srcFactInternetSales@PromotionKey == DimPromotion@PromotionKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPromotion",
						"joinPromotion, DimSalesTerritory lookup(srcFactInternetSales@SalesTerritoryKey == DimSalesTerritory@SalesTerritoryKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupSalesTerritory",
						"lkupSalesTerritory, DimCustomer lookup(srcFactInternetSales@CustomerKey == DimCustomer@CustomerKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupCustomer",
						"lkupCustomer, DimProduct lookup(srcFactInternetSales@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupProduct",
						"slctAfterLkups select(mapColumn(",
						"          ProductKey,",
						"          OrderDateKey,",
						"          DueDateKey,",
						"          ShipDateKey,",
						"          CustomerKey,",
						"          PromotionKey,",
						"          CurrencyKey,",
						"          SalesTerritoryKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          RevisionNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          OrderDate,",
						"          DueDate,",
						"          ShipDate,",
						"          PromotionAlternateKey,",
						"          EnglishPromotionName,",
						"          SpanishPromotionName,",
						"          FrenchPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          SpanishPromotionType,",
						"          FrenchPromotionType,",
						"          EnglishPromotionCategory,",
						"          SpanishPromotionCategory,",
						"          FrenchPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          SalesTerritoryImage,",
						"          GeographyKey,",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome,",
						"          EnglishEducation,",
						"          SpanishEducation,",
						"          FrenchEducation,",
						"          EnglishOccupation,",
						"          SpanishOccupation,",
						"          FrenchOccupation,",
						"          HouseOwnerFlag,",
						"          NumberCarsOwned,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          ProductAlternateKey,",
						"          ProductSubcategoryKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          SpanishProductName,",
						"          FrenchProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          LargePhoto,",
						"          EnglishDescription,",
						"          FrenchDescription,",
						"          ChineseDescription,",
						"          ArabicDescription,",
						"          HebrewDescription,",
						"          ThaiDescription,",
						"          GermanDescription,",
						"          JapaneseDescription,",
						"          TurkishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctTargetData",
						"slctTargetData derive(CustomerName = FirstName + ' '+LastName) ~> drvCustomerName",
						"drvCustomerName select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          EnglishPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          EnglishPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryKey,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          Color,",
						"          ListPrice,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          Status,",
						"          Customer_Name = CustomerName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> slctTarget",
						"lkupProduct select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctAfterLkups",
						"slctTarget keyGenerate(output(SalesNormalizedKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrKey",
						"surrKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Resellers_Sales_w_Transformations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "POCWork"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Resellers_Sales",
								"type": "DatasetReference"
							},
							"name": "srcResellersSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactResellersSales",
								"type": "DatasetReference"
							},
							"name": "TargetTable"
						}
					],
					"transformations": [
						{
							"name": "FilterDate"
						},
						{
							"name": "drvTotalCostwFrieghtTax"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          ResellerKey as integer,",
						"          EmployeeKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcResellersSales",
						"srcResellersSales filter(toDate(OrderDate) >=    toDate('2013-01-28 00:00:00.000')) ~> FilterDate",
						"FilterDate derive(TotalCostFrghtTx = TotalProductCost+TaxAmt+Freight) ~> drvTotalCostwFrieghtTax",
						"drvTotalCostwFrieghtTax sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetTable"
					]
				}
			},
			"dependsOn": []
		}
	]
}