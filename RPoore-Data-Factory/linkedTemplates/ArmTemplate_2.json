{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RPoore-Data-Factory"
		},
		"SQLRMLAPTOP610_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLRMLAPTOP610'"
		},
		"SQLRMLAPTOP610_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SQLRMLAPTOP610'"
		},
		"SQLRMLAPTOP610_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "CORPORATE\\rpoore"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_Resellers_Sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DueDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ResellerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmployeeKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PromotionKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrencyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesTerritoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderQuantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ExtendedAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscountPct",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DiscountAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ProductStandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalProductCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SalesAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerPONumber",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactResellerSales"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SCD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "AddressSCD"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_person')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CONCERNROLEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PERSONBIRTHNAME",
						"type": "varchar"
					},
					{
						"name": "DATEOFBIRTH",
						"type": "date"
					},
					{
						"name": "DATEOFDEATH",
						"type": "date"
					},
					{
						"name": "GENDER",
						"type": "char"
					},
					{
						"name": "SPECIALINTERESTCODE",
						"type": "char"
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UPPERPERSONBIRTHNAME",
						"type": "varchar"
					},
					{
						"name": "UPPERMOTHERBIRTHSURNAME",
						"type": "varchar"
					},
					{
						"name": "RACE",
						"type": "varchar"
					},
					{
						"name": "INDIGENOUSGROUPCODE",
						"type": "varchar"
					},
					{
						"name": "INDIGENOUSPERSONIND",
						"type": "char"
					},
					{
						"name": "VERSIONNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRIMARYALTERNATENAMEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ETHNICORIGINCODE",
						"type": "char"
					},
					{
						"name": "PAYMENTFREQUENCY",
						"type": "char"
					},
					{
						"name": "NEXTPAYMENTDATE",
						"type": "date"
					},
					{
						"name": "CURRENCYTYPE",
						"type": "char"
					},
					{
						"name": "METHODOFPMTCODE",
						"type": "char"
					},
					{
						"name": "DATEOFBIRTHVERIND",
						"type": "char"
					},
					{
						"name": "DATEOFDEATHVERIND",
						"type": "char"
					},
					{
						"name": "PRIMARYALTERNATEID",
						"type": "char"
					},
					{
						"name": "COUNTRYOFBIRTH",
						"type": "char"
					},
					{
						"name": "PLACEOFBIRTH",
						"type": "char"
					},
					{
						"name": "PINNUMBER",
						"type": "char"
					},
					{
						"name": "MARITALSTATUSCODE",
						"type": "char"
					},
					{
						"name": "NATIONALITYCODE",
						"type": "char"
					},
					{
						"name": "RESIDENCYABROADIND",
						"type": "char"
					},
					{
						"name": "MOTHERBIRTHSURNAME",
						"type": "varchar"
					},
					{
						"name": "COMMENTS",
						"type": "varchar"
					},
					{
						"name": "TYPE",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "PERSON"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rowswritten')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageRP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rowswritten.txt",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLRMLAPTOP610')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Renee's Lapto[",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQLRMLAPTOP610_connectionString')]",
					"userName": "[parameters('SQLRMLAPTOP610_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SQLRMLAPTOP610_password')]"
					}
				},
				"connectVia": {
					"referenceName": "mssqltips-selfhosted-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "\n",
				"activities": [
					{
						"name": "CopyDataCreateTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateSalesTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Fact_InternetSales_Copy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TruncateSalesTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "Truncate TABLE [dbo].[Fact_Internet_Sales_ODS]"
								}
							]
						}
					},
					{
						"name": "LogExecutionSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyDataCreateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@string(activity('CopyDataCreateTable').output.executionDetails)\n\n",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogExecutionFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyDataCreateTable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@activity('CopyDataCreateTable').error.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:04:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CodeTableHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TABLENAME",
						"type": "char"
					},
					{
						"name": "TIMEENTERED",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DEFAULTCODE",
						"type": "char"
					},
					{
						"name": "PARENTCODETABLE",
						"type": "char"
					},
					{
						"name": "VERSIONNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "CODETABLEHEADER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TABLENAME",
						"type": "char"
					},
					{
						"name": "CODE",
						"type": "char"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "ANNOTATION",
						"type": "varchar"
					},
					{
						"name": "ISENABLED",
						"type": "char"
					},
					{
						"name": "SORTORDER",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCALEIDENTIFIER",
						"type": "char"
					},
					{
						"name": "PARENTCODE",
						"type": "char"
					},
					{
						"name": "COMMENTS",
						"type": "varchar"
					},
					{
						"name": "VERSIONNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "CODETABLEITEM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_di4_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_di4_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_di4"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_di4_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_di4_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_fgf"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_vrc_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_vrc_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_vrc"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_vrc_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_vrc_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SDDenormalizedecision')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SDDENORMALIZEDDECISIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "INTEGRATEDCASEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PRODUCTDELIVERYCASEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PARTICIPANTID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREOLECASEDETERMINATIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "TIMELINESTARTDATE",
						"type": "date"
					},
					{
						"name": "TIMELINEENDDATE",
						"type": "date"
					},
					{
						"name": "ISELIGIBLE",
						"type": "char"
					},
					{
						"name": "PRODUCTID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CASEDECISIONSTATUSCODE",
						"type": "char"
					},
					{
						"name": "ISHOUSEHOLDMEMBERELIGIBLE",
						"type": "char"
					},
					{
						"name": "BENEFITAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "AIDCODE",
						"type": "char"
					},
					{
						"name": "RECORDSTATUS",
						"type": "char"
					},
					{
						"name": "RULEOBJECTSNAPSHOTDATAID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "UNEARNEDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "EARNEDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SELFEMPLOYMENTINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "INCOMEDEDUCTIONS",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "NETINDIVIDUALINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "ADJUSTEDGROSSINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "HOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDCOVERAGECODE",
						"type": "char"
					},
					{
						"name": "SDCOPAYVALUE",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDMONTHLYGROSSINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDISRETROACTIVE",
						"type": "char"
					},
					{
						"name": "SDPOVERTYLEVEL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDMEMBERPERCENTPOVERTYLEVEL",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDMEMBERCREDITABLEINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDISPREGNANT",
						"type": "char"
					},
					{
						"name": "SDMAGIHOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDMAGIMONTHLYHOUSEHOLDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDSTATEHOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDSTATEMONTHLYHOUSEHOLDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "TOTALSHAREOFCOSTAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ISUTILIZINGALLBENEFITS",
						"type": "char"
					},
					{
						"name": "LOTTERWINNINGSAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "UNCOMPENSATEDIRTAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "DAILYPRIVATEPAYRATE",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "SDDENORMALIZEDDECISION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_qt6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "stgAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "trgtAddress"
						}
					],
					"transformations": [
						{
							"name": "Exists"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "ModifiedDate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgAddress",
						"ModifiedDate, stgAddress exists(srcAddress@AddressID == stgAddress@AddressID,",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists alterRow(upsertIf(true())) ~> Upsert",
						"srcAddress derive(EDWCreateDate = currentTimestamp()) ~> ModifiedDate",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> trgtAddress"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address_SCD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "POCWork"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SCD1",
								"type": "DatasetReference"
							},
							"name": "trgtAddressSCD"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"srcAddress alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AddressID,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          City,",
						"          StateProvince,",
						"          CountryRegion,",
						"          PostalCode,",
						"          rowguid,",
						"          ModifiedDate",
						"     )) ~> trgtAddressSCD"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "stgAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "trgtAddress"
						}
					],
					"transformations": [
						{
							"name": "Checksum"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgAddress",
						"srcAddress derive(checksum = sha1(AddressLine1,AddressLine2,City,StateProvince,CountryRegion,PostalCode)) ~> Checksum",
						"Checksum, stgAddress exists(checksum == sha1(stgAddress@AddressLine1,stgAddress@AddressLine2,stgAddress@City,stgAddress@StateProvince,stgAddress@CountryRegion,stgAddress@PostalCode),",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> trgtAddress"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CustomerDim_Parameters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is not working as expected.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference"
							},
							"name": "srcCustomerDimwParameters"
						},
						{
							"dataset": {
								"referenceName": "Customer_Test",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerLoadTest",
								"type": "DatasetReference"
							},
							"name": "CustomerLoadTest"
						},
						{
							"dataset": {
								"referenceName": "Test_Date_Parameters",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchKey as string",
						"}",
						"source(output(",
						"          ProcessID as integer,",
						"          ProcessName as string,",
						"          StartDateTime as timestamp,",
						"          EndDateTime as timestamp,",
						"          BatchKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT StartDateTime ,EndDateTime ,BatchKey FROM dbo.EDW_Fact_Load_Control WHERE BatchKey='{$BatchKey}'\"),",
						"     format: 'query') ~> srcCustomerDimwParameters",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"srcCustomerDimwParameters filter(BatchKey==$BatchKey) ~> filter1",
						"source1, filter1 lookup(ModifiedDate >= StartDateTime,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CustomerLoadTest",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}