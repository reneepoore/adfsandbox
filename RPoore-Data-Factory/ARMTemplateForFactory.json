{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RPoore-Data-Factory"
		},
		"AdventureWorksLT2019_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AdventureWorksLT2019'"
		},
		"AzureBlobStorageRP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageRP'"
		},
		"AzureSqlDatabaseAdventureWorks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseAdventureWorks'"
		},
		"AzureSqlDatabaseAdventureWorksLT2019_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseAdventureWorksLT2019'"
		},
		"AzureSqlDatabaseODSCuramStage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseODSCuramStage'"
		},
		"SQLRMLAPTOP610_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLRMLAPTOP610'"
		},
		"SQLRMLAPTOP610_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SQLRMLAPTOP610'"
		},
		"SQLRMLAPTOP610_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "CORPORATE\\rpoore"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeePipelineWorkingADFExample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDimEmployee",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimEmployeeLoaderWorkingExampleFromADF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees1": {},
									"DimEmployees": {},
									"sinkNew": {},
									"sinkUpdates": {},
									"sinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DimEmployeeLoaderWorkingExampleFromADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_fgf_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_fgf_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_fgf_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_fgf_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_fgf_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[UpdateWatermarkColumnValue_fgf]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "SQLRMLAPTOP610",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_fgf_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_fgf_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ODS/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fgf_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fgf_DestinationDS')]",
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_fgf_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_fgf_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fgf_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_fgf_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_fgf_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_fgf_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.MainControlTable_fgf"
					}
				},
				"folder": {
					"name": "ODS/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2022-09-19T15:15:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fgf_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_fgf_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pL_Copy_CodeTableHeader')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "srcCopyLocal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CodeTableHeader",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AST_CodeTableHeader",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TruncateTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [dbo].[ODS_CodeTableHeader]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS/Curam Tables"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T20:08:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CodeTableHeader')]",
				"[concat(variables('factoryId'), '/datasets/AST_CodeTableHeader')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pL_Copy_CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "srcCopyLocal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CodeTableItem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AST_CodeTableItem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TruncateTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE v[dbo].[ODS_CodeTableItem]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS/Curam Tables"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T20:08:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CodeTableItem')]",
				"[concat(variables('factoryId'), '/datasets/AST_CodeTableItem')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_SDDenormalizedecision')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SDDENORMALIZEDDECISION",
				"activities": [
					{
						"name": "srcCopyLocal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SDDenormalizedecision",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AST_SDdenormalizedecision",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TruncateTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE  [dbo].[ODDS_SDdenormalizedecision]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS/Curam Tables"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T20:08:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SDDenormalizedecision')]",
				"[concat(variables('factoryId'), '/datasets/AST_SDdenormalizedecision')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LogTesting_POC_Test_MailAlert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Logging_Src_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Logging_Src_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDimCustomer": {},
									"tgtDimCustomerTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Error Output File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n'@{activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.rowsWritten}' as rowswritten,\n'@{activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.progressState}' as status\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rowswritten",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Mail Alert"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:18:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Logging_Src_Test')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/rowswritten')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LogTesting_POC_Test_MailAlert_Backup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Logging_Src_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Logging_Src_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDimCustomer": {},
									"tgtDimCustomerTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Error Output File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n'@{activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.rowsWritten}' as rowswritten,\n'@{activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.progressState}' as status\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rowswritten",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Mail Alert"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:18:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Logging_Src_Test')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/rowswritten')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LogTesting_to_Txt')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_LoggingTarget",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoggingTarget",
								"type": "DataFlowReference",
								"parameters": {
									"rowswritten": {
										"value": "@pipeline().parameters.rowswritten",
										"type": "Expression"
									},
									"status": {
										"value": "'@{pipeline().parameters.status}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcDummy": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"rowswritten": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Logging"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-11T13:47:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LoggingTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LogTesting_w_Copy_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Logging_Src_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Logging_Src_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDimCustomer": {},
									"tgtDimCustomerTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Error Output File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \r\n'@{activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.rowsWritten}' as rowswritten,\r\n'@{activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.progressState}' as status\r\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rowswritten",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Logging"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:22:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Logging_Src_Test')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/rowswritten')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LogTesting_w_Execute_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Logging_Src_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Logging_Src_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDimCustomer": {},
									"tgtDimCustomerTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LogTesting_to_Txt",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rowswritten": {
									"value": "@string(activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.rowsWritten)",
									"type": "Expression"
								},
								"status": {
									"value": "@string(activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.progressState)",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"globalone": {
						"type": "string",
						"defaultValue": "test"
					}
				},
				"variables": {
					"countrows": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Logging"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:22:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Logging_Src_Test')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LogTesting_to_Txt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoggingStoredProcedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LogExecutionData",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoggingStoredProcedure_Extended')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LogExecutionDataExtended",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-27T14:48:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_MASTER_wEmailNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipelines",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LogTesting_POC_Test_MailAlert",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Success Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipelines",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://rpsendemail.azurewebsites.net:443/api/SendEmail/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=xnVuhU0n2whYlNHCyiFNMdnY9iALouTQvHkkEcY5Hnc",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"title\": \"@{activity('Execute Pipelines').output.pipelineName} SUCCEEDED!\",\n    \"message\": \"Pipeline run finished successfully!\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{activity('Execute Pipelines').output.pipelineName}\",\n    \"pipelineRunId\": \"@{activity('Execute Pipelines').output.pipelineRunId}\",\n    \"time\": \"@{utcnow()}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipelines",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://rpsendemail.azurewebsites.net:443/api/SendEmail/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=xnVuhU0n2whYlNHCyiFNMdnY9iALouTQvHkkEcY5Hnc",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"title\": \"@{activity('Execute Pipelines').output.pipelineName} FAILED!\",\n    \"message\": \"Error: @{activity('Execute Pipelines').error.message}\",\n    \"color\": \"Red\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{activity('Execute Pipelines').output.pipelineName}\",\n    \"pipelineRunId\": \"@{activity('Execute Pipelines').output.pipelineRunId}\",\n    \"time\": \"@{utcnow()}\"\n    }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:04:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_LogTesting_POC_Test_MailAlert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_POC_CustomerDim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDates",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT        \nStartDateTime AS NOFormatStartDateTime,\nEndDateTime at time zone 'Central Standard Time' AS NOFormatEndDateTime,\nFORMAT (StartDateTime, 'yyyy-MM-dd hh:mm:ss') as StartDateTime,\nFORMAT (EndDateTime, 'yyyy-MM-dd hh:mm:ss') as EndDateTime\n\nFROM dbo.EDW_Fact_Load_Control\n   WHERE BatchKey= '@{pipeline().parameters.BatchKey}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "StartDateTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LoadDates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartDateTime",
							"value": {
								"value": "@activity('LoadDates').output.value[0].StartDateTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "EndDateTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LoadDates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "EndDateTime",
							"value": {
								"value": "@activity('LoadDates').output.value[0].EndDateTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "df_DimCustomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StartDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EndDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimCustomer",
								"type": "DataFlowReference",
								"parameters": {
									"dfStartDate": {
										"value": "'@{variables('StartDateTime')}'",
										"type": "Expression"
									},
									"dfEndDate": {
										"value": "'@{variables('EndDateTime')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcCustomSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchKey": {
						"type": "string",
						"defaultValue": "B5F7BEFB9510472A97DC7EF27D405EA2"
					}
				},
				"variables": {
					"StartDateTime": {
						"type": "String"
					},
					"EndDateTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-11T13:47:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_EDWLoadControl')]",
				"[concat(variables('factoryId'), '/dataflows/df_DimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_POC_CustomerDim_Working_Backup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDates",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT        \nStartDateTime AS NOFormatStartDateTime,\nEndDateTime at time zone 'Central Standard Time' AS NOFormatEndDateTime,\nFORMAT (StartDateTime, 'yyyy-MM-dd hh:mm:ss') as StartDateTime,\nFORMAT (EndDateTime, 'yyyy-MM-dd hh:mm:ss') as EndDateTime\n\nFROM dbo.EDW_Fact_Load_Control\n   WHERE BatchKey= '@{pipeline().parameters.BatchKey}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "StartDateTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LoadDates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartDateTime",
							"value": {
								"value": "@activity('LoadDates').output.value[0].StartDateTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "EndDateTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LoadDates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "EndDateTime",
							"value": {
								"value": "@activity('LoadDates').output.value[0].EndDateTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "df_DimCustomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StartDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EndDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimCustomer",
								"type": "DataFlowReference",
								"parameters": {
									"dfStartDate": {
										"value": "todate(variables('StartDateTime'))",
										"type": "Expression"
									},
									"dfEndDate": {
										"value": "'@{todate(variables('EndDateTime'))}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcCustomSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchKey": {
						"type": "string",
						"defaultValue": "B5F7BEFB9510472A97DC7EF27D405EA2"
					}
				},
				"variables": {
					"StartDateTime": {
						"type": "String"
					},
					"EndDateTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-11T13:47:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_EDWLoadControl')]",
				"[concat(variables('factoryId'), '/dataflows/df_DimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SCD1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Address_SCD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Address_SCD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcAddress": {},
									"trgtAddressSCD": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "c12a3331-1b0b-4fce-b726-5f9339600bb0"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Address_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDType2_EmployeePOC_TEST",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2_EmployeePOC_TEST",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployeeData": {},
									"tgtDimEmployee": {},
									"SinkNewData": {},
									"SinkInsertUpdates": {},
									"SinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SCDType2_EmployeePOC_YouTubeLogic",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2_EmployeePOC_YouTubeLogic",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployeeData": {},
									"tgtDimEmployee": {},
									"SinkUpdates": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DimEmployeeLoaderWorkingExampleFromADF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimEmployeeLoaderWorkingExampleFromADF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees1": {},
									"DimEmployees": {},
									"sinkNew": {},
									"sinkUpdates": {},
									"sinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2_EmployeePOC_TEST')]",
				"[concat(variables('factoryId'), '/dataflows/SCDType2_EmployeePOC_YouTubeLogic')]",
				"[concat(variables('factoryId'), '/dataflows/DimEmployeeLoaderWorkingExampleFromADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SCD2_POC_SouthDakota')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD2_BILearn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD2_BILearn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"srcEmployeeDim": {},
									"SinkEmployeeDimInsert": {},
									"SinkEmployeeDimUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD2_BILearn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Select_w_Lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Target is FactSalesProducts",
				"activities": [
					{
						"name": "df_Initial_Build_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Truncate_Target_Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Initial_Build_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetFactInternetSalesData": {},
									"DimProduct": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LogStoredProcedureData",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Initial_Build_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate_Target_Table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "Truncate Table [dbo].[FactSalesProducts]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [
					"Target is FactSalesProducts"
				],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Initial_Build_Test')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Test_Load_Dates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_CustomerDim_Parameters",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CustomerDim_Parameters",
								"type": "DataFlowReference",
								"parameters": {
									"BatchKey": {
										"value": "'@{pipeline().parameters.BatchKey}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcCustomerDimwParameters": {},
									"source1": {},
									"CustomerLoadTest": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchKey": {
						"type": "string",
						"defaultValue": "B5F7BEFB9510472A97DC7EF27D405EA2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-11T13:47:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CustomerDim_Parameters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Test_Logging_w_SP_Copy_Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Test Logging\n",
				"activities": [
					{
						"name": "LogExecutionSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@string(activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.progressState)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "df_Logging_Src_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Logging_Src_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDimCustomer": {},
									"tgtDimCustomerTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LogExecutionFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@activity('df_Logging_Src_Test').error.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:04:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]",
				"[concat(variables('factoryId'), '/dataflows/df_Logging_Src_Test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Test_Logging_w_SP_Copy_Table_USEFORTESTING')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Test Logging\n",
				"activities": [
					{
						"name": "LogExecutionSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@string(activity('df_Logging_Src_Test').output.runStatus.metrics.tgtDimCustomerTarget.progressState)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "df_Logging_Src_Test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Logging_Src_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDimCustomer": {},
									"tgtDimCustomerTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LogExecutionFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Logging_Src_Test",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@activity('df_Logging_Src_Test').error.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:50:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]",
				"[concat(variables('factoryId'), '/dataflows/df_Logging_Src_Test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "\n",
				"activities": [
					{
						"name": "CopyDataCreateTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateSalesTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Fact_InternetSales_Copy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TruncateSalesTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "Truncate TABLE [dbo].[Fact_Internet_Sales_ODS]"
								}
							]
						}
					},
					{
						"name": "LogExecutionSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyDataCreateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@string(activity('CopyDataCreateTable').output.executionDetails)\n\n",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogExecutionFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyDataCreateTable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@activity('CopyDataCreateTable').error.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-04T20:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales_Copy')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data_clone')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Target is Fact_InternetSales_Copy\n",
				"activities": [
					{
						"name": "CopyDataCreateTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateSalesTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Fact_InternetSales_Copy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TruncateSalesTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "Truncate TABLE [dbo].[Fact_InternetSales_Copy]"
								}
							]
						}
					},
					{
						"name": "LogExecutionDataExtended",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Address",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorcodeloggedtime": {
									"value": {
										"value": "@{utcnow()}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"errordescription": {
									"value": {
										"value": "@activity('df_Address').output.runstatus.executorVersion",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "df_Address",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyDataCreateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Address",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcAddress": {},
									"stgAddress": {},
									"trgtAddress": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "a992fff9-e1aa-42a7-b8b1-73fa9362dc63"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [
					"Target is Fact_InternetSales_Copy"
				],
				"lastPublishTime": "2022-09-27T16:52:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales_Copy')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]",
				"[concat(variables('factoryId'), '/dataflows/df_Address')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_filter_derived_column')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Target is FactResellersSales\n",
				"activities": [
					{
						"name": "df_Resellers_Sales_w_Transformations",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TruncateSalesTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Resellers_Sales_w_Transformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcResellersSales": {},
									"TargetTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TruncateSalesTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "Truncate TABLE   [dbo].[Fact_Resellers_Sales_ODS]"
								}
							]
						}
					},
					{
						"name": "LogExecutionDataExtended",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Resellers_Sales_w_Transformations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [
					"FactResellersSales"
				],
				"lastPublishTime": "2022-09-27T14:49:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Resellers_Sales_w_Transformations')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_incremental_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Address",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Address",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcAddress": {},
									"stgAddress": {},
									"trgtAddress": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "20ae376e-817a-4689-b9ee-3cc896f17b41"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Address')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_normalized_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is an example of a pipeline with various steps. The  target is  dbo.Fact_InternetSales_Normalized",
				"activities": [
					{
						"name": "df_Normalize_Internet_Sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Truncate_Target_Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Normalize_Internet_Sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcFactInternetSales": {},
									"DimPromotion": {},
									"DimSalesTerritory": {},
									"DimCustomer": {},
									"DimProduct": {},
									"TargetData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Truncate_Target_Table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "Truncate Table dbo.Fact_InternetSales_Normalized"
								}
							]
						}
					},
					{
						"name": "LogStoredProcedureData",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_Normalize_Internet_Sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_adfPipelineExecutions]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseODSCuramStage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [
					"Target is dbo.Fact_InternetSales_Normalized"
				],
				"lastPublishTime": "2022-09-19T15:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Normalize_Internet_Sales')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AST_CodeTableHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target ODS Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ODS_CodeTableHeader"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AST_CodeTableHeader_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target ODS Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ODS_CodeTableHeader"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AST_CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target ODS Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ODS_CodeTableItem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AST_SDdenormalizedecision')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target ODS Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ODDS_SDdenormalizedecision"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Address')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/AdventureWorksLT2019/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Address"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AddressIncrmUpdate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/AdventureWorksLT2019/Target"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AddressIncrmUpdate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "errorlogging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerTest"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CodeTableHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TABLENAME",
						"type": "char"
					},
					{
						"name": "TIMEENTERED",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DEFAULTCODE",
						"type": "char"
					},
					{
						"name": "PARENTCODETABLE",
						"type": "char"
					},
					{
						"name": "VERSIONNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "CODETABLEHEADER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TABLENAME",
						"type": "char"
					},
					{
						"name": "CODE",
						"type": "char"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "ANNOTATION",
						"type": "varchar"
					},
					{
						"name": "ISENABLED",
						"type": "char"
					},
					{
						"name": "SORTORDER",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCALEIDENTIFIER",
						"type": "char"
					},
					{
						"name": "PARENTCODE",
						"type": "char"
					},
					{
						"name": "COMMENTS",
						"type": "varchar"
					},
					{
						"name": "VERSIONNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "CODETABLEITEM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerLoadTest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This will load the Customers in the EDW. SCD 1",
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "EDW"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "CustomerLoadTest"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_Test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "nvarchar"
					},
					{
						"name": "PasswordSalt",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerTest"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageRP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dfdummy.txt",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_qt6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimAddress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dimensions"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Address"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "EnglishProductName",
						"type": "nvarchar"
					},
					{
						"name": "SpanishProductName",
						"type": "nvarchar"
					},
					{
						"name": "FrenchProductName",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeRange",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "DealerPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ModelName",
						"type": "nvarchar"
					},
					{
						"name": "LargePhoto",
						"type": "varbinary"
					},
					{
						"name": "EnglishDescription",
						"type": "nvarchar"
					},
					{
						"name": "FrenchDescription",
						"type": "nvarchar"
					},
					{
						"name": "ChineseDescription",
						"type": "nvarchar"
					},
					{
						"name": "ArabicDescription",
						"type": "nvarchar"
					},
					{
						"name": "HebrewDescription",
						"type": "nvarchar"
					},
					{
						"name": "ThaiDescription",
						"type": "nvarchar"
					},
					{
						"name": "GermanDescription",
						"type": "nvarchar"
					},
					{
						"name": "JapaneseDescription",
						"type": "nvarchar"
					},
					{
						"name": "TurkishDescription",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimPromotion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PromotionKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PromotionAlternateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EnglishPromotionName",
						"type": "nvarchar"
					},
					{
						"name": "SpanishPromotionName",
						"type": "nvarchar"
					},
					{
						"name": "FrenchPromotionName",
						"type": "nvarchar"
					},
					{
						"name": "DiscountPct",
						"type": "float",
						"precision": 15
					},
					{
						"name": "EnglishPromotionType",
						"type": "nvarchar"
					},
					{
						"name": "SpanishPromotionType",
						"type": "nvarchar"
					},
					{
						"name": "FrenchPromotionType",
						"type": "nvarchar"
					},
					{
						"name": "EnglishPromotionCategory",
						"type": "nvarchar"
					},
					{
						"name": "SpanishPromotionCategory",
						"type": "nvarchar"
					},
					{
						"name": "FrenchPromotionCategory",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MinQty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MaxQty",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimPromotion"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimSalesTerritory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesTerritoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesTerritoryAlternateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesTerritoryRegion",
						"type": "nvarchar"
					},
					{
						"name": "SalesTerritoryCountry",
						"type": "nvarchar"
					},
					{
						"name": "SalesTerritoryGroup",
						"type": "nvarchar"
					},
					{
						"name": "SalesTerritoryImage",
						"type": "varbinary"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimSalesTerritory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dummy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageRP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dfdummy.txt",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageRP",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Function",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeFiles1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageRP",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee2.csv",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Function",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactInternetSalesNormalized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target AdWrks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Fact_InternetSales_Normalized"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactResellersSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target AdWrks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Fact_Resellers_Sales_ODS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Facts"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OnlineOrderFlag",
						"type": "bit"
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "varchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Comment",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderHeader"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactSalesProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target AdWrks"
				},
				"annotations": [
					"TEST"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactSalesProducts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact_InternetSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DueDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PromotionKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrencyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesTerritoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderQuantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ExtendedAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscountPct",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DiscountAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ProductStandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalProductCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SalesAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerPONumber",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactInternetSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact_InternetSales_Copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target AdWrks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Fact_InternetSales_Copy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_di4_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_di4_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_di4"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_di4_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_di4_20220829"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_di4_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_di4_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_fgf"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fgf_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_fgf_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_vrc_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_vrc_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_vrc"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_vrc_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_vrc_20220829"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_vrc_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ODS/MetadataCopyTask/MetadataDrivenCopyTask_vrc_20220829"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SDDenormalizedecision')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SDDENORMALIZEDDECISIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "INTEGRATEDCASEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PRODUCTDELIVERYCASEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PARTICIPANTID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREOLECASEDETERMINATIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "TIMELINESTARTDATE",
						"type": "date"
					},
					{
						"name": "TIMELINEENDDATE",
						"type": "date"
					},
					{
						"name": "ISELIGIBLE",
						"type": "char"
					},
					{
						"name": "PRODUCTID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CASEDECISIONSTATUSCODE",
						"type": "char"
					},
					{
						"name": "ISHOUSEHOLDMEMBERELIGIBLE",
						"type": "char"
					},
					{
						"name": "BENEFITAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "AIDCODE",
						"type": "char"
					},
					{
						"name": "RECORDSTATUS",
						"type": "char"
					},
					{
						"name": "RULEOBJECTSNAPSHOTDATAID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "UNEARNEDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "EARNEDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SELFEMPLOYMENTINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "INCOMEDEDUCTIONS",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "NETINDIVIDUALINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "ADJUSTEDGROSSINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "HOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDCOVERAGECODE",
						"type": "char"
					},
					{
						"name": "SDCOPAYVALUE",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDMONTHLYGROSSINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDISRETROACTIVE",
						"type": "char"
					},
					{
						"name": "SDPOVERTYLEVEL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDMEMBERPERCENTPOVERTYLEVEL",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDMEMBERCREDITABLEINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDISPREGNANT",
						"type": "char"
					},
					{
						"name": "SDMAGIHOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDMAGIMONTHLYHOUSEHOLDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "SDSTATEHOUSEHOLDSIZE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SDSTATEMONTHLYHOUSEHOLDINCOME",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "TOTALSHAREOFCOSTAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ISUTILIZINGALLBENEFITS",
						"type": "char"
					},
					{
						"name": "LOTTERWINNINGSAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "UNCOMPENSATEDIRTAMOUNT",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "DAILYPRIVATEPAYRATE",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "SDDENORMALIZEDDECISION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_qt6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLRMLAPTOP610",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLRMLAPTOP610')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestDataForEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestDataForEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestDataForEmployeeDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestDataForEmployeeDim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Date_Parameters')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Test_Date_Parameters"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_CustomerSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer_Source"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DimCustomer_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Target AdWrks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nvarchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer_Target"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_EDWLoadControl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Logging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProcessID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProcessName",
						"type": "varchar"
					},
					{
						"name": "StartDateTime",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "EndDateTime",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "BatchKey",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EDW_Fact_Load_Control"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Resellers_Sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork/Source"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DueDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ResellerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmployeeKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PromotionKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrencyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesTerritoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderQuantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ExtendedAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscountPct",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DiscountAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ProductStandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalProductCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SalesAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerPONumber",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactResellerSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SCD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "AddressSCD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorksLT2019')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_person')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseODSCuramStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CONCERNROLEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PERSONBIRTHNAME",
						"type": "varchar"
					},
					{
						"name": "DATEOFBIRTH",
						"type": "date"
					},
					{
						"name": "DATEOFDEATH",
						"type": "date"
					},
					{
						"name": "GENDER",
						"type": "char"
					},
					{
						"name": "SPECIALINTERESTCODE",
						"type": "char"
					},
					{
						"name": "LASTWRITTEN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UPPERPERSONBIRTHNAME",
						"type": "varchar"
					},
					{
						"name": "UPPERMOTHERBIRTHSURNAME",
						"type": "varchar"
					},
					{
						"name": "RACE",
						"type": "varchar"
					},
					{
						"name": "INDIGENOUSGROUPCODE",
						"type": "varchar"
					},
					{
						"name": "INDIGENOUSPERSONIND",
						"type": "char"
					},
					{
						"name": "VERSIONNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRIMARYALTERNATENAMEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ETHNICORIGINCODE",
						"type": "char"
					},
					{
						"name": "PAYMENTFREQUENCY",
						"type": "char"
					},
					{
						"name": "NEXTPAYMENTDATE",
						"type": "date"
					},
					{
						"name": "CURRENCYTYPE",
						"type": "char"
					},
					{
						"name": "METHODOFPMTCODE",
						"type": "char"
					},
					{
						"name": "DATEOFBIRTHVERIND",
						"type": "char"
					},
					{
						"name": "DATEOFDEATHVERIND",
						"type": "char"
					},
					{
						"name": "PRIMARYALTERNATEID",
						"type": "char"
					},
					{
						"name": "COUNTRYOFBIRTH",
						"type": "char"
					},
					{
						"name": "PLACEOFBIRTH",
						"type": "char"
					},
					{
						"name": "PINNUMBER",
						"type": "char"
					},
					{
						"name": "MARITALSTATUSCODE",
						"type": "char"
					},
					{
						"name": "NATIONALITYCODE",
						"type": "char"
					},
					{
						"name": "RESIDENCYABROADIND",
						"type": "char"
					},
					{
						"name": "MOTHERBIRTHSURNAME",
						"type": "varchar"
					},
					{
						"name": "COMMENTS",
						"type": "varchar"
					},
					{
						"name": "TYPE",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "CURAPD01",
					"table": "PERSON"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseODSCuramStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rowswritten')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageRP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "POCWork"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rowswritten.txt",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgSourceEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "EmergencyContactName",
						"type": "nvarchar"
					},
					{
						"name": "EmergencyContactPhone",
						"type": "nvarchar"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "DepartmentName",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stgSourceEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtDimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgtDimEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdventureWorksLT2019')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AdventureWorksLT2019_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageRP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageRP_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseAdventureWorks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseAdventureWorks_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseAdventureWorksLT2019')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseAdventureWorksLT2019_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseODSCuramStage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseODSCuramStage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLRMLAPTOP610')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Renee's Lapto[",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQLRMLAPTOP610_connectionString')]",
					"userName": "[parameters('SQLRMLAPTOP610_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SQLRMLAPTOP610_password')]"
					}
				},
				"connectVia": {
					"referenceName": "mssqltips-selfhosted-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/mssqltips-selfhosted-ir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_CopyData')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 3,
						"startTime": "2022-08-17T13:47:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mssqltips-selfhosted-ir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "RMLAPTOP-610",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeeLoaderWorkingExampleFromADF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles1",
								"type": "DatasetReference"
							},
							"name": "Employees1",
							"description": " Source employees file, changes every day"
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "DimEmployees",
							"description": "Current rows in DimEmployees DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkNew",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkUpdates",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": " Age out old rows"
						}
					],
					"transformations": [
						{
							"name": "TypeConversions"
						},
						{
							"name": "TypeConversionsAndSetAttrs"
						},
						{
							"name": "LookupIDs"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "checkForChanges"
						},
						{
							"name": "SetAttrsForNew"
						},
						{
							"name": "SetAttrsInactive",
							"description": "make iscurrent 0"
						},
						{
							"name": "SetAttrsUpdate"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "InactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "NullFilter",
							"description": "Filter out NULLs from source file"
						},
						{
							"name": "NameNorm2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as string,",
						"          Region as string,",
						"          Status as string,",
						"          Function as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as string,",
						"          EndDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> Employees1",
						"source(output(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimEmployees",
						"DimEmployees derive(EmpID = toInteger(EmpID)) ~> TypeConversions",
						"NullFilter derive(EmpID = toInteger(EmpID),",
						"          StartDate = toDate(StartDate,'MM/dd/yyyy'),",
						"          EndDate = toDate(EndDate,'MM/dd/yyyy'),",
						"          processtime = currentTimestamp()) ~> TypeConversionsAndSetAttrs",
						"TypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@EmpID == TypeConversions@EmpID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookupIDs",
						"NormNames split(isNull(iscurrent),",
						"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
						"NameNorm2, TypeConversions exists(NameNorm2@EmpID == TypeConversions@EmpID,",
						"     negate:false,",
						"     broadcast: 'auto')~> checkForChanges",
						"ConditionalSplit1@NewRow derive(iscurrent = 1,",
						"          surrogatekey = toString(crc32(EmpID,EmpFunction))) ~> SetAttrsForNew",
						"checkForChanges derive(iscurrent = 0) ~> SetAttrsInactive",
						"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
						"LookupIDs select(mapColumn(",
						"          EmpID = TypeConversionsAndSetAttrs@EmpID,",
						"          Region = Employees1@Region,",
						"          Status = Employees1@Status,",
						"          Level = Employees1@Level,",
						"          Role = Employees1@Role,",
						"          StartDate = TypeConversionsAndSetAttrs@StartDate,",
						"          EndDate = TypeConversionsAndSetAttrs@EndDate,",
						"          EmpFunction = Function,",
						"          iscurrent,",
						"          processtime = TypeConversionsAndSetAttrs@processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NormNames",
						"SetAttrsInactive select(mapColumn(",
						"          EmpID,",
						"          Status,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> InactiveFields",
						"InactiveFields alterRow(updateIf(true())) ~> AlterRow1",
						"Employees1 filter(!isNull(EmpID)) ~> NullFilter",
						"ConditionalSplit1@CheckForUpdates select(mapColumn(",
						"          EmpID,",
						"          Region,",
						"          Status,",
						"          Level,",
						"          Role,",
						"          StartDate,",
						"          EndDate,",
						"          EmpFunction,",
						"          iscurrent,",
						"          processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NameNorm2",
						"SetAttrsForNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkNew",
						"SetAttrsUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkUpdates",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['EmpID'],",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpID,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     partitionBy('roundRobin', 4)) ~> sinkInactive"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeFiles1')]",
				"[concat(variables('factoryId'), '/datasets/DimEmp1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2_BILearn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TestDataForEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						},
						{
							"dataset": {
								"referenceName": "TestDataForEmployeeDim",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestDataForEmployeeDim",
								"type": "DatasetReference"
							},
							"name": "SinkEmployeeDimInsert"
						},
						{
							"dataset": {
								"referenceName": "TestDataForEmployeeDim",
								"type": "DatasetReference"
							},
							"name": "SinkEmployeeDimUpdate"
						}
					],
					"transformations": [
						{
							"name": "HASHInput"
						},
						{
							"name": "HASHRef"
						},
						{
							"name": "SetToActive"
						},
						{
							"name": "ExistsCheckforUpdates"
						},
						{
							"name": "ExistsCheckforObsolete"
						},
						{
							"name": "SetToInActive"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "FilterForTesting"
						}
					],
					"script": "source(output(\n\t\tEmpID as short,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tMiddleName as string,\n\t\tTitle as string,\n\t\tHireDate as date,\n\t\tBirthDate as date,\n\t\tPhone as string,\n\t\tMaritalStatus as string,\n\t\tEmergencyContactName as string,\n\t\tEmergencyContactPhone as string,\n\t\tSalariedFlag as boolean,\n\t\tGender as string,\n\t\tDepartmentName as string,\n\t\tStartDate as date,\n\t\tEndDate as string,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\twildcardPaths:['2021/*.csv']) ~> srcEmployee\nsource(output(\n\t\tEmployeeKey as integer,\n\t\tEmpID as short,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tMiddleName as string,\n\t\tTitle as string,\n\t\tHireDate as date,\n\t\tBirthDate as date,\n\t\tPhone as string,\n\t\tMaritalStatus as string,\n\t\tEmergencyContactName as string,\n\t\tEmergencyContactPhone as string,\n\t\tSalariedFlag as boolean,\n\t\tGender as string,\n\t\tDepartmentName as string,\n\t\tStartDate as date,\n\t\tEndDate as string,\n\t\tStatus as string,\n\t\tIsActive as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> srcEmployeeDim\nSelectColumns derive(inputhash = md5(EmpID,LastName,Title,Phone,MaritalStatus,SalariedFlag,DepartmentName)) ~> HASHInput\nsrcEmployeeDim derive(sqlhash = md5(EmpID,LastName,Title,Phone,MaritalStatus,SalariedFlag,DepartmentName)) ~> HASHRef\nExistsCheckforUpdates derive(IsActive = 1,\n\t\tEndDate = toDate('9999-12-31')) ~> SetToActive\nHASHInput, HASHRef exists(inputhash == sqlhash,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistsCheckforUpdates\nHASHRef, SetToActive exists(srcEmployeeDim@EmpID == SelectColumns@EmpID,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsCheckforObsolete\nExistsCheckforObsolete derive(EndDate = toDate(currentUTC()),\n\t\tIsActive = 0,\n\t\tStatus = 'Termed') ~> SetToInActive\nSetToInActive alterRow(updateIf(true())) ~> AlterRow1\nFilterForTesting select(mapColumn(\n\t\tEmpID,\n\t\tFirstName,\n\t\tLastName,\n\t\tMiddleName,\n\t\tTitle,\n\t\tHireDate,\n\t\tBirthDate,\n\t\tPhone,\n\t\tMaritalStatus,\n\t\tEmergencyContactName,\n\t\tEmergencyContactPhone,\n\t\tSalariedFlag,\n\t\tGender,\n\t\tDepartmentName,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nsrcEmployee filter(EmpID ==1002) ~> FilterForTesting\nSetToActive sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmpID,\n\t\tFirstName,\n\t\tLastName,\n\t\tMiddleName,\n\t\tTitle,\n\t\tHireDate,\n\t\tBirthDate,\n\t\tPhone,\n\t\tMaritalStatus,\n\t\tEmergencyContactName,\n\t\tEmergencyContactPhone,\n\t\tSalariedFlag,\n\t\tGender,\n\t\tDepartmentName,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus,\n\t\tIsActive\n\t)) ~> SinkEmployeeDimInsert\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmployeeKey'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmployeeKey,\n\t\tEmpID,\n\t\tFirstName,\n\t\tLastName,\n\t\tMiddleName,\n\t\tTitle,\n\t\tHireDate,\n\t\tBirthDate,\n\t\tPhone,\n\t\tMaritalStatus,\n\t\tEmergencyContactName,\n\t\tEmergencyContactPhone,\n\t\tSalariedFlag,\n\t\tGender,\n\t\tDepartmentName,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus,\n\t\tIsActive\n\t)) ~> SinkEmployeeDimUpdate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TestDataForEmployee')]",
				"[concat(variables('factoryId'), '/datasets/TestDataForEmployeeDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkNewData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkInsertUpdates"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkInactive"
						}
					],
					"transformations": [
						{
							"name": "SetIsActive"
						},
						{
							"name": "CheckNewRecords"
						},
						{
							"name": "SelectToRename"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "AddIsActive"
						},
						{
							"name": "ChangeIsActive"
						},
						{
							"name": "SelectInactiveColumns"
						},
						{
							"name": "UpdateColumns"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "FilterCurrent"
						},
						{
							"name": "SelectSinkColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"CheckNewRecords@NewRecords derive(IsActive = 1) ~> SetIsActive",
						"SelectColumns split(isNull(tgtIsActive),",
						"     disjoint: false) ~> CheckNewRecords@(NewRecords, CheckForUpdates)",
						"CheckNewRecords@CheckForUpdates select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          MiddleName,",
						"          Title,",
						"          HireDate,",
						"          BirthDate,",
						"          Phone,",
						"          MaritalStatus,",
						"          EmergencyContactName,",
						"          EmergencyContactPhone,",
						"          SalariedFlag,",
						"          Gender,",
						"          DepartmentName,",
						"          StartDate,",
						"          EndDate,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectToRename",
						"SelectToRename, tgtDimEmployee exists(SelectToRename@FirstName ==tgtDimEmployee@FirstName&&\r",
						"SelectToRename@LastName==tgtDimEmployee@LastName&&\r",
						"SelectToRename@BirthDate==tgtDimEmployee@BirthDate&&\r",
						"\r",
						"(\r",
						"SelectToRename@LastName!=tgtDimEmployee@LastName||\r",
						"SelectToRename@Title!=tgtDimEmployee@Title||\r",
						"SelectToRename@Phone!=tgtDimEmployee@Phone||\r",
						"SelectToRename@MaritalStatus!=tgtDimEmployee@MaritalStatus||\r",
						"SelectToRename@SalariedFlag!=tgtDimEmployee@SalariedFlag||\r",
						"SelectToRename@DepartmentName!=tgtDimEmployee@DepartmentName||\r",
						"SelectToRename@EndDate!=tgtDimEmployee@EndDate||\r",
						"SelectToRename@Status!=tgtDimEmployee@Status),",
						"     negate:false,",
						"     broadcast: 'left')~> CheckForChanges",
						"CheckForChanges derive(IsActive = 1) ~> AddIsActive",
						"CheckForChanges derive(drvIsActive = 0,",
						"          drvEndDate = currentDate(),",
						"          drvStatus = 'Termed') ~> ChangeIsActive",
						"ChangeIsActive select(mapColumn(",
						"          EndDate = drvEndDate,",
						"          Status = drvStatus,",
						"          IsActive = drvIsActive,",
						"          FirstName,",
						"          LastName,",
						"          BirthDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveColumns",
						"SelectInactiveColumns alterRow(updateIf(true())) ~> UpdateColumns",
						"FilterCurrent, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"LkpEmployee select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          EmployeeKey,",
						"          tgtLastName = tgtDimEmployee@LastName,",
						"          tgtTitle = tgtDimEmployee@Title,",
						"          tgtPhone = tgtDimEmployee@Phone,",
						"          tgtMaritalStatus = tgtDimEmployee@MaritalStatus,",
						"          tgtSalariedFlag = tgtDimEmployee@SalariedFlag,",
						"          tgtDepartmentName = tgtDimEmployee@DepartmentName,",
						"          tgtEndDate = tgtDimEmployee@EndDate,",
						"          tgtStatus = tgtDimEmployee@Status,",
						"          tgtIsActive = IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"srcEmployeeData filter(Status=='Current') ~> FilterCurrent",
						"SetIsActive select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          MiddleName,",
						"          Title,",
						"          HireDate,",
						"          BirthDate,",
						"          Phone,",
						"          MaritalStatus,",
						"          EmergencyContactName,",
						"          EmergencyContactPhone,",
						"          SalariedFlag,",
						"          Gender,",
						"          DepartmentName,",
						"          StartDate,",
						"          EndDate,",
						"          Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkNewData",
						"AddIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkInsertUpdates",
						"UpdateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['FirstName','LastName','BirthDate'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkInactive"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/tgtDimEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_YouTubeLogic')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkUpdates"
						}
					],
					"transformations": [
						{
							"name": "AddIsActive"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "FilterCurrent"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSinkColumns"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"LkpEmployee derive(IsActive = 1) ~> AddIsActive",
						"FilterCurrent, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"srcEmployeeData filter(Status=='Current') ~> FilterCurrent",
						"tgtDimEmployee filter(Status=='Current') ~> filter1",
						"AddIsActive select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns alterRow(insertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkUpdates"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/tgtDimEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2_EmployeePOC_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "POC for SCD Type 2 with Adventure Works Data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeData"
						},
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtDimEmployee",
								"type": "DatasetReference"
							},
							"name": "SinkUpdates"
						}
					],
					"transformations": [
						{
							"name": "AddIsActive"
						},
						{
							"name": "LkpEmployee"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSinkColumns"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployeeData",
						"source(output(",
						"          EmployeeKey as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          MiddleName as string,",
						"          Title as string,",
						"          HireDate as date,",
						"          BirthDate as date,",
						"          Phone as string,",
						"          MaritalStatus as string,",
						"          EmergencyContactName as string,",
						"          EmergencyContactPhone as string,",
						"          SalariedFlag as boolean,",
						"          Gender as string,",
						"          DepartmentName as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtDimEmployee",
						"LkpEmployee derive(IsActive = 1) ~> AddIsActive",
						"srcEmployeeData, tgtDimEmployee lookup(srcEmployeeData@FirstName == tgtDimEmployee@FirstName",
						"     && srcEmployeeData@LastName == tgtDimEmployee@LastName",
						"     && srcEmployeeData@BirthDate == tgtDimEmployee@BirthDate,",
						"     multiple: true,",
						"     broadcast: 'right')~> LkpEmployee",
						"tgtDimEmployee filter(Status=='Current') ~> filter1",
						"AddIsActive select(mapColumn(",
						"          FirstName = srcEmployeeData@FirstName,",
						"          LastName = srcEmployeeData@LastName,",
						"          MiddleName = srcEmployeeData@MiddleName,",
						"          Title = srcEmployeeData@Title,",
						"          HireDate = srcEmployeeData@HireDate,",
						"          BirthDate = srcEmployeeData@BirthDate,",
						"          Phone = srcEmployeeData@Phone,",
						"          MaritalStatus = srcEmployeeData@MaritalStatus,",
						"          EmergencyContactName = srcEmployeeData@EmergencyContactName,",
						"          EmergencyContactPhone = srcEmployeeData@EmergencyContactPhone,",
						"          SalariedFlag = srcEmployeeData@SalariedFlag,",
						"          Gender = srcEmployeeData@Gender,",
						"          DepartmentName = srcEmployeeData@DepartmentName,",
						"          StartDate = srcEmployeeData@StartDate,",
						"          EndDate = srcEmployeeData@EndDate,",
						"          Status = srcEmployeeData@Status,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkColumns",
						"SelectSinkColumns alterRow(insertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkUpdates"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/tgtDimEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "stgAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "trgtAddress"
						}
					],
					"transformations": [
						{
							"name": "Exists"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "ModifiedDate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgAddress",
						"ModifiedDate, stgAddress exists(srcAddress@AddressID == stgAddress@AddressID,",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists alterRow(upsertIf(true())) ~> Upsert",
						"srcAddress derive(EDWCreateDate = currentTimestamp()) ~> ModifiedDate",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> trgtAddress"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Address')]",
				"[concat(variables('factoryId'), '/datasets/AddressIncrmUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address_SCD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "POCWork"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SCD1",
								"type": "DatasetReference"
							},
							"name": "trgtAddressSCD"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"srcAddress alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AddressID,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          City,",
						"          StateProvince,",
						"          CountryRegion,",
						"          PostalCode,",
						"          rowguid,",
						"          ModifiedDate",
						"     )) ~> trgtAddressSCD"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Address')]",
				"[concat(variables('factoryId'), '/datasets/ds_SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Address_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "stgAddress"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AddressIncrmUpdate",
								"type": "DatasetReference"
							},
							"name": "trgtAddress"
						}
					],
					"transformations": [
						{
							"name": "Checksum"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgAddress",
						"srcAddress derive(checksum = sha1(AddressLine1,AddressLine2,City,StateProvince,CountryRegion,PostalCode)) ~> Checksum",
						"Checksum, stgAddress exists(checksum == sha1(stgAddress@AddressLine1,stgAddress@AddressLine2,stgAddress@City,stgAddress@StateProvince,stgAddress@CountryRegion,stgAddress@PostalCode),",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['AddressID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> trgtAddress"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Address')]",
				"[concat(variables('factoryId'), '/datasets/AddressIncrmUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CustomerDim_Parameters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is not working as expected.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference"
							},
							"name": "srcCustomerDimwParameters"
						},
						{
							"dataset": {
								"referenceName": "Customer_Test",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerLoadTest",
								"type": "DatasetReference"
							},
							"name": "CustomerLoadTest"
						},
						{
							"dataset": {
								"referenceName": "Test_Date_Parameters",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchKey as string",
						"}",
						"source(output(",
						"          ProcessID as integer,",
						"          ProcessName as string,",
						"          StartDateTime as timestamp,",
						"          EndDateTime as timestamp,",
						"          BatchKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT StartDateTime ,EndDateTime ,BatchKey FROM dbo.EDW_Fact_Load_Control WHERE BatchKey='{$BatchKey}'\"),",
						"     format: 'query') ~> srcCustomerDimwParameters",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"srcCustomerDimwParameters filter(BatchKey==$BatchKey) ~> filter1",
						"source1, filter1 lookup(ModifiedDate >= StartDateTime,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CustomerLoadTest",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_EDWLoadControl')]",
				"[concat(variables('factoryId'), '/datasets/Customer_Test')]",
				"[concat(variables('factoryId'), '/datasets/CustomerLoadTest')]",
				"[concat(variables('factoryId'), '/datasets/Test_Date_Parameters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CustomerDim_Parameters_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is not working as expected.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_EDWLoadControl",
								"type": "DatasetReference"
							},
							"name": "srcCustomerDimwParameters"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     BatchKey as string ('B5F7BEFB9510472A97DC7EF27D405EA2')",
						"}",
						"source(output(",
						"          ProcessID as integer,",
						"          ProcessName as string,",
						"          StartDateTime as timestamp,",
						"          EndDateTime as timestamp,",
						"          BatchKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '@\"SELECT StartDateTime ,EndDateTime ,BatchKey FROM dbo.EDW_Fact_Load_Control WHERE BatchKey=\\'$BatchKey\\'\"',",
						"     format: 'query') ~> srcCustomerDimwParameters",
						"srcCustomerDimwParameters sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_EDWLoadControl')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_CustomerSource",
								"type": "DatasetReference"
							},
							"name": "srcCustomSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     dfStartDate as string,",
						"     formattedStartDate as date (toDate($dfStartDate)),",
						"     dfEndDate as string,",
						"     formattedEndDate as date (toDate($dfEndDate))",
						"}",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat(\"select * from SalesLT.Customer_Source where ModifiedDate> \",toString($formattedStartDate) )),",
						"     format: 'query') ~> srcCustomSource",
						"srcCustomSource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE dbo.CustomerTest'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_CustomerSource')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Initial_Build_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "GetFactInternetSalesData"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactSalesProducts",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GetFactInternetSalesData",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"GetFactInternetSalesData select(mapColumn(",
						"          ProductKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, DimProduct lookup(select1@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          ProductKey = DimProduct@ProductKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          EnglishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/DimProduct')]",
				"[concat(variables('factoryId'), '/datasets/FactSalesProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoggingTarget')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "srcDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rowswritten",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorageRP",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     rowswritten as integer,",
						"     status as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcDummy",
						"srcDummy derive(rowswritten1 = $rowswritten,",
						"          status = $status) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['rowswritten.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = rowswritten1,",
						"          Column_2 = status",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dummy')]",
				"[concat(variables('factoryId'), '/datasets/rowswritten')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoggingTarget_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "srcDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rowswritten",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorageRP",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as integer,",
						"     parameter2 as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcDummy",
						"srcDummy derive(rowswritten1 = $parameter1,",
						"          status1 = $parameter2) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['rowswritten.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = rowswritten1,",
						"          Column_2 = status1",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dummy')]",
				"[concat(variables('factoryId'), '/datasets/rowswritten')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageRP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Logging_Src_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to test logging for a dataflow\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DimCustomer_Target",
								"type": "DatasetReference"
							},
							"name": "tgtDimCustomerTarget",
							"description": "Target table"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          GeographyKey,",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome,",
						"          EnglishEducation,",
						"          SpanishEducation,",
						"          FrenchEducation,",
						"          EnglishOccupation,",
						"          SpanishOccupation,",
						"          FrenchOccupation,",
						"          HouseOwnerFlag,",
						"          NumberCarsOwned,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance",
						"     )) ~> tgtDimCustomerTarget"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/ds_DimCustomer_Target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Logging_Src_Test_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to test logging for a dataflow\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DimCustomer_Target",
								"type": "DatasetReference"
							},
							"name": "tgtDimCustomerTarget",
							"description": "Target table"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> tgtDimCustomerTarget"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/ds_DimCustomer_Target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Normalize_Internet_Sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "srcFactInternetSales"
						},
						{
							"dataset": {
								"referenceName": "DimPromotion",
								"type": "DatasetReference"
							},
							"name": "DimPromotion"
						},
						{
							"dataset": {
								"referenceName": "DimSalesTerritory",
								"type": "DatasetReference"
							},
							"name": "DimSalesTerritory"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactInternetSalesNormalized",
								"type": "DatasetReference"
							},
							"name": "TargetData"
						}
					],
					"transformations": [
						{
							"name": "joinPromotion"
						},
						{
							"name": "lkupSalesTerritory"
						},
						{
							"name": "lkupCustomer"
						},
						{
							"name": "lkupProduct"
						},
						{
							"name": "slctTargetData"
						},
						{
							"name": "drvCustomerName"
						},
						{
							"name": "slctTarget"
						},
						{
							"name": "slctAfterLkups"
						},
						{
							"name": "surrKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcFactInternetSales",
						"source(output(",
						"          PromotionKey as integer,",
						"          PromotionAlternateKey as integer,",
						"          EnglishPromotionName as string,",
						"          SpanishPromotionName as string,",
						"          FrenchPromotionName as string,",
						"          DiscountPct as double,",
						"          EnglishPromotionType as string,",
						"          SpanishPromotionType as string,",
						"          FrenchPromotionType as string,",
						"          EnglishPromotionCategory as string,",
						"          SpanishPromotionCategory as string,",
						"          FrenchPromotionCategory as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          MinQty as integer,",
						"          MaxQty as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimPromotion",
						"source(output(",
						"          SalesTerritoryKey as integer,",
						"          SalesTerritoryAlternateKey as integer,",
						"          SalesTerritoryRegion as string,",
						"          SalesTerritoryCountry as string,",
						"          SalesTerritoryGroup as string,",
						"          SalesTerritoryImage as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimSalesTerritory",
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"srcFactInternetSales, DimPromotion join(srcFactInternetSales@PromotionKey == DimPromotion@PromotionKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPromotion",
						"joinPromotion, DimSalesTerritory lookup(srcFactInternetSales@SalesTerritoryKey == DimSalesTerritory@SalesTerritoryKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupSalesTerritory",
						"lkupSalesTerritory, DimCustomer lookup(srcFactInternetSales@CustomerKey == DimCustomer@CustomerKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupCustomer",
						"lkupCustomer, DimProduct lookup(srcFactInternetSales@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupProduct",
						"slctAfterLkups select(mapColumn(",
						"          ProductKey,",
						"          OrderDateKey,",
						"          DueDateKey,",
						"          ShipDateKey,",
						"          CustomerKey,",
						"          PromotionKey,",
						"          CurrencyKey,",
						"          SalesTerritoryKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          RevisionNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          OrderDate,",
						"          DueDate,",
						"          ShipDate,",
						"          PromotionAlternateKey,",
						"          EnglishPromotionName,",
						"          SpanishPromotionName,",
						"          FrenchPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          SpanishPromotionType,",
						"          FrenchPromotionType,",
						"          EnglishPromotionCategory,",
						"          SpanishPromotionCategory,",
						"          FrenchPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          SalesTerritoryImage,",
						"          GeographyKey,",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome,",
						"          EnglishEducation,",
						"          SpanishEducation,",
						"          FrenchEducation,",
						"          EnglishOccupation,",
						"          SpanishOccupation,",
						"          FrenchOccupation,",
						"          HouseOwnerFlag,",
						"          NumberCarsOwned,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          ProductAlternateKey,",
						"          ProductSubcategoryKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          SpanishProductName,",
						"          FrenchProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          LargePhoto,",
						"          EnglishDescription,",
						"          FrenchDescription,",
						"          ChineseDescription,",
						"          ArabicDescription,",
						"          HebrewDescription,",
						"          ThaiDescription,",
						"          GermanDescription,",
						"          JapaneseDescription,",
						"          TurkishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctTargetData",
						"slctTargetData derive(CustomerName = FirstName + ' '+LastName) ~> drvCustomerName",
						"drvCustomerName select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          EnglishPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          EnglishPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryKey,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          Color,",
						"          ListPrice,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          Status,",
						"          Customer_Name = CustomerName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> slctTarget",
						"lkupProduct select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctAfterLkups",
						"slctTarget keyGenerate(output(SalesNormalizedKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrKey",
						"surrKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/DimPromotion')]",
				"[concat(variables('factoryId'), '/datasets/DimSalesTerritory')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DimProduct')]",
				"[concat(variables('factoryId'), '/datasets/FactInternetSalesNormalized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Normalize_Internet_Sales_w_Truncate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "srcFactInternetSales"
						},
						{
							"dataset": {
								"referenceName": "DimPromotion",
								"type": "DatasetReference"
							},
							"name": "DimPromotion"
						},
						{
							"dataset": {
								"referenceName": "DimSalesTerritory",
								"type": "DatasetReference"
							},
							"name": "DimSalesTerritory"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactInternetSalesNormalized",
								"type": "DatasetReference"
							},
							"name": "TargetData"
						}
					],
					"transformations": [
						{
							"name": "joinPromotion"
						},
						{
							"name": "lkupSalesTerritory"
						},
						{
							"name": "lkupCustomer"
						},
						{
							"name": "lkupProduct"
						},
						{
							"name": "slctTargetData"
						},
						{
							"name": "drvCustomerName"
						},
						{
							"name": "slctTarget"
						},
						{
							"name": "slctAfterLkups"
						},
						{
							"name": "surrKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcFactInternetSales",
						"source(output(",
						"          PromotionKey as integer,",
						"          PromotionAlternateKey as integer,",
						"          EnglishPromotionName as string,",
						"          SpanishPromotionName as string,",
						"          FrenchPromotionName as string,",
						"          DiscountPct as double,",
						"          EnglishPromotionType as string,",
						"          SpanishPromotionType as string,",
						"          FrenchPromotionType as string,",
						"          EnglishPromotionCategory as string,",
						"          SpanishPromotionCategory as string,",
						"          FrenchPromotionCategory as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          MinQty as integer,",
						"          MaxQty as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimPromotion",
						"source(output(",
						"          SalesTerritoryKey as integer,",
						"          SalesTerritoryAlternateKey as integer,",
						"          SalesTerritoryRegion as string,",
						"          SalesTerritoryCountry as string,",
						"          SalesTerritoryGroup as string,",
						"          SalesTerritoryImage as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimSalesTerritory",
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"srcFactInternetSales, DimPromotion join(srcFactInternetSales@PromotionKey == DimPromotion@PromotionKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPromotion",
						"joinPromotion, DimSalesTerritory lookup(srcFactInternetSales@SalesTerritoryKey == DimSalesTerritory@SalesTerritoryKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupSalesTerritory",
						"lkupSalesTerritory, DimCustomer lookup(srcFactInternetSales@CustomerKey == DimCustomer@CustomerKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupCustomer",
						"lkupCustomer, DimProduct lookup(srcFactInternetSales@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupProduct",
						"slctAfterLkups select(mapColumn(",
						"          ProductKey,",
						"          OrderDateKey,",
						"          DueDateKey,",
						"          ShipDateKey,",
						"          CustomerKey,",
						"          PromotionKey,",
						"          CurrencyKey,",
						"          SalesTerritoryKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          RevisionNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          OrderDate,",
						"          DueDate,",
						"          ShipDate,",
						"          PromotionAlternateKey,",
						"          EnglishPromotionName,",
						"          SpanishPromotionName,",
						"          FrenchPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          SpanishPromotionType,",
						"          FrenchPromotionType,",
						"          EnglishPromotionCategory,",
						"          SpanishPromotionCategory,",
						"          FrenchPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          SalesTerritoryImage,",
						"          GeographyKey,",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome,",
						"          EnglishEducation,",
						"          SpanishEducation,",
						"          FrenchEducation,",
						"          EnglishOccupation,",
						"          SpanishOccupation,",
						"          FrenchOccupation,",
						"          HouseOwnerFlag,",
						"          NumberCarsOwned,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          ProductAlternateKey,",
						"          ProductSubcategoryKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          SpanishProductName,",
						"          FrenchProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          LargePhoto,",
						"          EnglishDescription,",
						"          FrenchDescription,",
						"          ChineseDescription,",
						"          ArabicDescription,",
						"          HebrewDescription,",
						"          ThaiDescription,",
						"          GermanDescription,",
						"          JapaneseDescription,",
						"          TurkishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctTargetData",
						"slctTargetData derive(CustomerName = FirstName + ' '+LastName) ~> drvCustomerName",
						"drvCustomerName select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          EnglishPromotionName,",
						"          DiscountPct,",
						"          EnglishPromotionType,",
						"          EnglishPromotionCategory,",
						"          StartDate,",
						"          EndDate,",
						"          MinQty,",
						"          MaxQty,",
						"          SalesTerritoryKey,",
						"          SalesTerritoryAlternateKey,",
						"          SalesTerritoryRegion,",
						"          SalesTerritoryCountry,",
						"          SalesTerritoryGroup,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          NameStyle,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          EmailAddress,",
						"          YearlyIncome,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          Phone,",
						"          DateFirstPurchase,",
						"          CommuteDistance,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          Color,",
						"          ListPrice,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          Status,",
						"          Customer_Name = CustomerName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> slctTarget",
						"lkupProduct select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> slctAfterLkups",
						"slctTarget keyGenerate(output(SalesNormalizedKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrKey",
						"surrKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/DimPromotion')]",
				"[concat(variables('factoryId'), '/datasets/DimSalesTerritory')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DimProduct')]",
				"[concat(variables('factoryId'), '/datasets/FactInternetSalesNormalized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Resellers_Sales_w_Transformations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "POCWork"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Resellers_Sales",
								"type": "DatasetReference"
							},
							"name": "srcResellersSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactResellersSales",
								"type": "DatasetReference"
							},
							"name": "TargetTable"
						}
					],
					"transformations": [
						{
							"name": "FilterDate"
						},
						{
							"name": "drvTotalCostwFrieghtTax"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          ResellerKey as integer,",
						"          EmployeeKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcResellersSales",
						"srcResellersSales filter(toDate(OrderDate) >=    toDate('2013-01-28 00:00:00.000')) ~> FilterDate",
						"FilterDate derive(TotalCostFrghtTx = TotalProductCost+TaxAmt+Freight) ~> drvTotalCostwFrieghtTax",
						"drvTotalCostwFrieghtTax sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Resellers_Sales')]",
				"[concat(variables('factoryId'), '/datasets/FactResellersSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Sales_Product_Normalized')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "POCWork"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Fact_InternetSales",
								"type": "DatasetReference"
							},
							"name": "GetFactInternetSalesData"
						},
						{
							"dataset": {
								"referenceName": "DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactSalesProducts",
								"type": "DatasetReference"
							},
							"name": "TargetTable"
						}
					],
					"transformations": [
						{
							"name": "GetSalesData"
						},
						{
							"name": "lkupProduct"
						},
						{
							"name": "TargetSalesData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as integer,",
						"          OrderDateKey as integer,",
						"          DueDateKey as integer,",
						"          ShipDateKey as integer,",
						"          CustomerKey as integer,",
						"          PromotionKey as integer,",
						"          CurrencyKey as integer,",
						"          SalesTerritoryKey as integer,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GetFactInternetSalesData",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimProduct",
						"GetFactInternetSalesData select(mapColumn(",
						"          ProductKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> GetSalesData",
						"GetSalesData, DimProduct lookup(GetSalesData@ProductKey == DimProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkupProduct",
						"lkupProduct select(mapColumn(",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          ProductKey = DimProduct@ProductKey,",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          DaysToManufacture,",
						"          ProductLine,",
						"          DealerPrice,",
						"          Class,",
						"          Style,",
						"          ModelName,",
						"          EnglishDescription,",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TargetSalesData",
						"TargetSalesData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TargetTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fact_InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/DimProduct')]",
				"[concat(variables('factoryId'), '/datasets/FactSalesProducts')]"
			]
		}
	]
}