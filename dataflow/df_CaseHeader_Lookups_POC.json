{
	"name": "df_CaseHeader_Lookups_POC",
	"properties": {
		"folder": {
			"name": "Testing"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CodeTables",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CaseHeader",
						"type": "DatasetReference"
					},
					"name": "srcCaseHeader"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dummy",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CaseObjective"
				},
				{
					"name": "CaseStatus"
				},
				{
					"name": "CasePriority"
				},
				{
					"name": "CaseOutcome"
				},
				{
					"name": "CaseCatTypeCode"
				},
				{
					"name": "CaseClassification"
				},
				{
					"name": "CaseTypeCode"
				},
				{
					"name": "SelectCaseColumns"
				},
				{
					"name": "LookupCaseObjective"
				},
				{
					"name": "SelectCaseObjective"
				},
				{
					"name": "LookupStatus"
				},
				{
					"name": "SelectCaseStatus"
				},
				{
					"name": "LookupCasePriority"
				},
				{
					"name": "SelectCasePriority"
				},
				{
					"name": "LookupCaseOutcome"
				},
				{
					"name": "SelectCaseOutcome"
				},
				{
					"name": "LookupTypeCode"
				},
				{
					"name": "SelectCaseCatTypeCode"
				},
				{
					"name": "LookupClassification"
				},
				{
					"name": "SelectClassification"
				},
				{
					"name": "LookupCaseTypeCode"
				},
				{
					"name": "SelectCaseTypeCode"
				},
				{
					"name": "TrimCodeFields"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TABLENAME as string,",
				"          CODE as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source(output(",
				"          APPEALINDICATOR as string,",
				"          CASEID as long,",
				"          INTEGRATEDCASEID as long,",
				"          CASEREFERENCE as string,",
				"          CASETYPECODE as string,",
				"          CLASSIFICATIONCODE as string,",
				"          EXPECTEDOUTCOME as long,",
				"          ACTUALOUTCOME as string,",
				"          OWNERORGOBJECTLINKID as long,",
				"          VERSIONNO as integer,",
				"          LASTWRITTEN as timestamp,",
				"          INTEGRATEDCASETYPE as string,",
				"          OBJECTIVECODE as string,",
				"          OUTCOMECODE as string,",
				"          PLANID as long,",
				"          PRIORITYCODE as string,",
				"          RECEIVEDDATE as date,",
				"          EFFECTIVEDATE as date,",
				"          STATUSCODE as string,",
				"          ENDDATE as date,",
				"          EXPECTEDENDDATE as date,",
				"          EXPECTEDSTARTDATE as date,",
				"          FIRSTREVIEWDATE as date,",
				"          COMMENTS as string,",
				"          CONCERNROLEID as long,",
				"          REGISTRATIONDATE as date,",
				"          STARTDATE as date,",
				"          DEFAULTCURRENCYTYPECODE as string,",
				"          DEFAULTDELIVERYMETHODTYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcCaseHeader",
				"source3 filter(TABLENAME=='CaseObjective') ~> CaseObjective",
				"source3 filter(TABLENAME=='CaseStatus') ~> CaseStatus",
				"source3 filter(TABLENAME=='CasePriority') ~> CasePriority",
				"source3 filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
				"source3 filter(TABLENAME=='CaseCatTypeCode') ~> CaseCatTypeCode",
				"source3 filter(TABLENAME=='CaseClassification') ~> CaseClassification",
				"source3 filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
				"TrimCodeFields select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          INTEGRATEDCASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          INTEGRATEDCASETYPE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseColumns",
				"SelectCaseColumns, CaseObjective lookup(OBJECTIVECODE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCaseObjective",
				"LookupCaseObjective select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseObjective",
				"SelectCaseObjective, CaseStatus lookup(STATUSCODE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupStatus",
				"LookupStatus select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION,",
				"          CaseStatus_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseStatus",
				"SelectCaseStatus, CasePriority lookup(PRIORITYCODE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCasePriority",
				"LookupCasePriority select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION,",
				"          CaseStatus_DESCRIPTION,",
				"          CasePriority_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCasePriority",
				"SelectCasePriority, CaseOutcome lookup(OUTCOMECODE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCaseOutcome",
				"LookupCaseOutcome select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION,",
				"          CaseStatus_DESCRIPTION,",
				"          CasePriority_DESCRIPTION,",
				"          CaseOutcome_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseOutcome",
				"SelectCaseOutcome, CaseCatTypeCode lookup(INTEGRATEDCASETYPE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupTypeCode",
				"LookupTypeCode select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION,",
				"          CaseStatus_DESCRIPTION,",
				"          CasePriority_DESCRIPTION,",
				"          CaseOutcome_DESCRIPTION,",
				"          CaseCatType_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseCatTypeCode",
				"SelectCaseCatTypeCode, CaseClassification lookup(CLASSIFICATIONCODE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupClassification",
				"LookupClassification select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION,",
				"          CaseStatus_DESCRIPTION,",
				"          CasePriority_DESCRIPTION,",
				"          CaseOutcome_DESCRIPTION,",
				"          CaseCatType_DESCRIPTION,",
				"          CaseClass_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectClassification",
				"SelectClassification, CaseTypeCode lookup(CASETYPECODE == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCaseTypeCode",
				"LookupCaseTypeCode select(mapColumn(",
				"          APPEALINDICATOR,",
				"          CASEID,",
				"          CASETYPECODE,",
				"          CLASSIFICATIONCODE,",
				"          OBJECTIVECODE,",
				"          OUTCOMECODE,",
				"          PRIORITYCODE,",
				"          STATUSCODE,",
				"          INTEGRATEDCASETYPE,",
				"          CaseObj_DESCRIPTION,",
				"          CaseStatus_DESCRIPTION,",
				"          CasePriority_DESCRIPTION,",
				"          CaseOutcome_DESCRIPTION,",
				"          CaseCatType_DESCRIPTION,",
				"          CaseClass_DESCRIPTION,",
				"          CaseType_DESCRIPTION = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseTypeCode",
				"srcCaseHeader derive(OBJECTIVECODE = trim(OBJECTIVECODE),",
				"          CASETYPECODE = trim(CASETYPECODE),",
				"          CLASSIFICATIONCODE = trim(CLASSIFICATIONCODE),",
				"          INTEGRATEDCASETYPE = trim(INTEGRATEDCASETYPE),",
				"          PRIORITYCODE = trim(PRIORITYCODE),",
				"          STATUSCODE = trim(STATUSCODE),",
				"          OUTCOMECODE = trim(OUTCOMECODE)) ~> TrimCodeFields",
				"SelectCaseTypeCode sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}