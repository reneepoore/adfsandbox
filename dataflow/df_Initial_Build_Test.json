{
	"name": "df_Initial_Build_Test",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Fact_InternetSales",
						"type": "DatasetReference"
					},
					"name": "GetFactInternetSalesData"
				},
				{
					"dataset": {
						"referenceName": "DimProduct",
						"type": "DatasetReference"
					},
					"name": "DimProduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FactSalesProducts",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductKey as integer,",
				"          OrderDateKey as integer,",
				"          DueDateKey as integer,",
				"          ShipDateKey as integer,",
				"          CustomerKey as integer,",
				"          PromotionKey as integer,",
				"          CurrencyKey as integer,",
				"          SalesTerritoryKey as integer,",
				"          SalesOrderNumber as string,",
				"          SalesOrderLineNumber as integer,",
				"          RevisionNumber as integer,",
				"          OrderQuantity as integer,",
				"          UnitPrice as decimal(19,4),",
				"          ExtendedAmount as decimal(19,4),",
				"          UnitPriceDiscountPct as double,",
				"          DiscountAmount as double,",
				"          ProductStandardCost as decimal(19,4),",
				"          TotalProductCost as decimal(19,4),",
				"          SalesAmount as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          CarrierTrackingNumber as string,",
				"          CustomerPONumber as string,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> GetFactInternetSalesData",
				"source(output(",
				"          ProductKey as integer,",
				"          ProductAlternateKey as string,",
				"          ProductSubcategoryKey as integer,",
				"          WeightUnitMeasureCode as string,",
				"          SizeUnitMeasureCode as string,",
				"          EnglishProductName as string,",
				"          SpanishProductName as string,",
				"          FrenchProductName as string,",
				"          StandardCost as decimal(19,4),",
				"          FinishedGoodsFlag as boolean,",
				"          Color as string,",
				"          SafetyStockLevel as integer,",
				"          ReorderPoint as integer,",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          SizeRange as string,",
				"          Weight as double,",
				"          DaysToManufacture as integer,",
				"          ProductLine as string,",
				"          DealerPrice as decimal(19,4),",
				"          Class as string,",
				"          Style as string,",
				"          ModelName as string,",
				"          LargePhoto as binary,",
				"          EnglishDescription as string,",
				"          FrenchDescription as string,",
				"          ChineseDescription as string,",
				"          ArabicDescription as string,",
				"          HebrewDescription as string,",
				"          ThaiDescription as string,",
				"          GermanDescription as string,",
				"          JapaneseDescription as string,",
				"          TurkishDescription as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          Status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimProduct",
				"GetFactInternetSalesData select(mapColumn(",
				"          ProductKey,",
				"          SalesOrderNumber,",
				"          SalesOrderLineNumber,",
				"          OrderQuantity,",
				"          UnitPrice,",
				"          ExtendedAmount,",
				"          UnitPriceDiscountPct,",
				"          DiscountAmount,",
				"          ProductStandardCost,",
				"          TotalProductCost,",
				"          SalesAmount,",
				"          TaxAmt,",
				"          Freight,",
				"          CarrierTrackingNumber,",
				"          CustomerPONumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, DimProduct lookup(select1@ProductKey == DimProduct@ProductKey,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          SalesOrderNumber,",
				"          SalesOrderLineNumber,",
				"          OrderQuantity,",
				"          UnitPrice,",
				"          ExtendedAmount,",
				"          UnitPriceDiscountPct,",
				"          DiscountAmount,",
				"          ProductStandardCost,",
				"          TotalProductCost,",
				"          SalesAmount,",
				"          TaxAmt,",
				"          Freight,",
				"          CarrierTrackingNumber,",
				"          CustomerPONumber,",
				"          ProductKey = DimProduct@ProductKey,",
				"          WeightUnitMeasureCode,",
				"          SizeUnitMeasureCode,",
				"          EnglishProductName,",
				"          StandardCost,",
				"          FinishedGoodsFlag,",
				"          Color,",
				"          SafetyStockLevel,",
				"          ReorderPoint,",
				"          ListPrice,",
				"          Size,",
				"          SizeRange,",
				"          Weight,",
				"          DaysToManufacture,",
				"          ProductLine,",
				"          DealerPrice,",
				"          Class,",
				"          Style,",
				"          ModelName,",
				"          EnglishDescription,",
				"          Status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}