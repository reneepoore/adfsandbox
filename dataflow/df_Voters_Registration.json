{
	"name": "df_Voters_Registration",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DATASTOREENTITY",
						"type": "DatasetReference"
					},
					"name": "srcDATASTOREENTITY"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SimpleTest",
						"type": "DatasetReference"
					},
					"name": "tgtSimpleTest"
				}
			],
			"transformations": [
				{
					"name": "drvLocate"
				},
				{
					"name": "drvEntityValue"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ENTITYID as long,",
				"          ISOVERFLOWIND as string,",
				"          OVERFLOWNEXTID as long,",
				"          ENTITYTYPE as string,",
				"          ENTITYVALUE as string,",
				"          VERSIONNO as integer,",
				"          LASTWRITTEN as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcDATASTOREENTITY",
				"srcDATASTOREENTITY derive(ENTITYVALUE = locate ('sdVoterRegistrationFormInd=\"',ENTITYVALUE),",
				"          ENTITYVALUE_ORG = ENTITYVALUE) ~> drvLocate",
				"drvLocate derive(EntityPosValue = iif(ENTITYVALUE!=0, substring(ENTITYVALUE_ORG, ENTITYVALUE+28, 8),'na' )) ~> drvEntityValue",
				"drvEntityValue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string",
				"     ),",
				"     partitionFileNames:['SimpleTest.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> tgtSimpleTest"
			]
		}
	}
}